using GreekTrans;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities;
using System.Diagnostics;
using System.Text;
using Xunit.Abstractions;

namespace NewTest
{
    public class UnitTest1
    {
        // https://xunit.net/docs/capturing-output
        private readonly ITestOutputHelper output;

        public UnitTest1(ITestOutputHelper output)
        {
            this.output = output;
        }

        #region 双元音

        [Theory]
        // 集合（upper_alpha_without_dasia）+ 集合（upper_iota_with_dasia）→HAI；
        [InlineData(1, "ΑἹ→HAI")]
        [InlineData(2, "ΆἹ→HAI")]
        [InlineData(3, "ΆἹ→HAI")]
        [InlineData(4, "ᾺἹ→HAI")]
        [InlineData(5, "ᾸἹ→HAI")]
        [InlineData(6, "ᾹἹ→HAI")]
        [InlineData(7, "ἈἹ→HAI")]
        [InlineData(8, "ἌἹ→HAI")]
        [InlineData(9, "ἊἹ→HAI")]
        [InlineData(10, "ᾎἹ→HAI")]
        [InlineData(11, "ᾼἹ→HAI")]
        [InlineData(12, "ἎἹ→HAI")]
        [InlineData(13, "ᾈἹ→HAI")]
        [InlineData(14, "ᾌἹ→HAI")]
        [InlineData(15, "ᾊἹ→HAI")]
        [InlineData(16, "ΑἽ→HAI")]
        [InlineData(17, "ΆἽ→HAI")]
        [InlineData(18, "ΆἽ→HAI")]
        [InlineData(19, "ᾺἽ→HAI")]
        [InlineData(20, "ᾸἽ→HAI")]
        [InlineData(21, "ᾹἽ→HAI")]
        [InlineData(22, "ἈἽ→HAI")]
        [InlineData(23, "ἌἽ→HAI")]
        [InlineData(24, "ἊἽ→HAI")]
        [InlineData(25, "ᾎἽ→HAI")]
        [InlineData(26, "ᾼἽ→HAI")]
        [InlineData(27, "ἎἽ→HAI")]
        [InlineData(28, "ᾈἽ→HAI")]
        [InlineData(29, "ᾌἽ→HAI")]
        [InlineData(30, "ᾊἽ→HAI")]
        [InlineData(31, "ΑἻ→HAI")]
        [InlineData(32, "ΆἻ→HAI")]
        [InlineData(33, "ΆἻ→HAI")]
        [InlineData(34, "ᾺἻ→HAI")]
        [InlineData(35, "ᾸἻ→HAI")]
        [InlineData(36, "ᾹἻ→HAI")]
        [InlineData(37, "ἈἻ→HAI")]
        [InlineData(38, "ἌἻ→HAI")]
        [InlineData(39, "ἊἻ→HAI")]
        [InlineData(40, "ᾎἻ→HAI")]
        [InlineData(41, "ᾼἻ→HAI")]
        [InlineData(42, "ἎἻ→HAI")]
        [InlineData(43, "ᾈἻ→HAI")]
        [InlineData(44, "ᾌἻ→HAI")]
        [InlineData(45, "ᾊἻ→HAI")]
        [InlineData(46, "ΑἿ→HAI")]
        [InlineData(47, "ΆἿ→HAI")]
        [InlineData(48, "ΆἿ→HAI")]
        [InlineData(49, "ᾺἿ→HAI")]
        [InlineData(50, "ᾸἿ→HAI")]
        [InlineData(51, "ᾹἿ→HAI")]
        [InlineData(52, "ἈἿ→HAI")]
        [InlineData(53, "ἌἿ→HAI")]
        [InlineData(54, "ἊἿ→HAI")]
        [InlineData(55, "ᾎἿ→HAI")]
        [InlineData(56, "ᾼἿ→HAI")]
        [InlineData(57, "ἎἿ→HAI")]
        [InlineData(58, "ᾈἿ→HAI")]
        [InlineData(59, "ᾌἿ→HAI")]
        [InlineData(60, "ᾊἿ→HAI")]
        // 共 61 个
        public void test_HAI(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        // 集合（upper_alpha_without_dasia）+ 集合（upper_iota_without_dasia）→AI；
        [InlineData(1, "ΑΙ→AI")]
        [InlineData(2, "ΆΙ→AI")]
        [InlineData(3, "ΆΙ→AI")]
        [InlineData(4, "ᾺΙ→AI")]
        [InlineData(5, "ᾸΙ→AI")]
        [InlineData(6, "ᾹΙ→AI")]
        [InlineData(7, "ἈΙ→AI")]
        [InlineData(8, "ἌΙ→AI")]
        [InlineData(9, "ἊΙ→AI")]
        [InlineData(10, "ᾎΙ→AI")]
        [InlineData(11, "ᾼΙ→AI")]
        [InlineData(12, "ἎΙ→AI")]
        [InlineData(13, "ᾈΙ→AI")]
        [InlineData(14, "ᾌΙ→AI")]
        [InlineData(15, "ᾊΙ→AI")]
        [InlineData(16, "ΑΊ→AI")]
        [InlineData(17, "ΆΊ→AI")]
        [InlineData(18, "ΆΊ→AI")]
        [InlineData(19, "ᾺΊ→AI")]
        [InlineData(20, "ᾸΊ→AI")]
        [InlineData(21, "ᾹΊ→AI")]
        [InlineData(22, "ἈΊ→AI")]
        [InlineData(23, "ἌΊ→AI")]
        [InlineData(24, "ἊΊ→AI")]
        [InlineData(25, "ᾎΊ→AI")]
        [InlineData(26, "ᾼΊ→AI")]
        [InlineData(27, "ἎΊ→AI")]
        [InlineData(28, "ᾈΊ→AI")]
        [InlineData(29, "ᾌΊ→AI")]
        [InlineData(30, "ᾊΊ→AI")]
        [InlineData(31, "ΑΊ→AI")]
        [InlineData(32, "ΆΊ→AI")]
        [InlineData(33, "ΆΊ→AI")]
        [InlineData(34, "ᾺΊ→AI")]
        [InlineData(35, "ᾸΊ→AI")]
        [InlineData(36, "ᾹΊ→AI")]
        [InlineData(37, "ἈΊ→AI")]
        [InlineData(38, "ἌΊ→AI")]
        [InlineData(39, "ἊΊ→AI")]
        [InlineData(40, "ᾎΊ→AI")]
        [InlineData(41, "ᾼΊ→AI")]
        [InlineData(42, "ἎΊ→AI")]
        [InlineData(43, "ᾈΊ→AI")]
        [InlineData(44, "ᾌΊ→AI")]
        [InlineData(45, "ᾊΊ→AI")]
        [InlineData(46, "ΑῚ→AI")]
        [InlineData(47, "ΆῚ→AI")]
        [InlineData(48, "ΆῚ→AI")]
        [InlineData(49, "ᾺῚ→AI")]
        [InlineData(50, "ᾸῚ→AI")]
        [InlineData(51, "ᾹῚ→AI")]
        [InlineData(52, "ἈῚ→AI")]
        [InlineData(53, "ἌῚ→AI")]
        [InlineData(54, "ἊῚ→AI")]
        [InlineData(55, "ᾎῚ→AI")]
        [InlineData(56, "ᾼῚ→AI")]
        [InlineData(57, "ἎῚ→AI")]
        [InlineData(58, "ᾈῚ→AI")]
        [InlineData(59, "ᾌῚ→AI")]
        [InlineData(60, "ᾊῚ→AI")]
        [InlineData(61, "ΑΪ→AI")]
        [InlineData(62, "ΆΪ→AI")]
        [InlineData(63, "ΆΪ→AI")]
        [InlineData(64, "ᾺΪ→AI")]
        [InlineData(65, "ᾸΪ→AI")]
        [InlineData(66, "ᾹΪ→AI")]
        [InlineData(67, "ἈΪ→AI")]
        [InlineData(68, "ἌΪ→AI")]
        [InlineData(69, "ἊΪ→AI")]
        [InlineData(70, "ᾎΪ→AI")]
        [InlineData(71, "ᾼΪ→AI")]
        [InlineData(72, "ἎΪ→AI")]
        [InlineData(73, "ᾈΪ→AI")]
        [InlineData(74, "ᾌΪ→AI")]
        [InlineData(75, "ᾊΪ→AI")]
        [InlineData(76, "ΑῘ→AI")]
        [InlineData(77, "ΆῘ→AI")]
        [InlineData(78, "ΆῘ→AI")]
        [InlineData(79, "ᾺῘ→AI")]
        [InlineData(80, "ᾸῘ→AI")]
        [InlineData(81, "ᾹῘ→AI")]
        [InlineData(82, "ἈῘ→AI")]
        [InlineData(83, "ἌῘ→AI")]
        [InlineData(84, "ἊῘ→AI")]
        [InlineData(85, "ᾎῘ→AI")]
        [InlineData(86, "ᾼῘ→AI")]
        [InlineData(87, "ἎῘ→AI")]
        [InlineData(88, "ᾈῘ→AI")]
        [InlineData(89, "ᾌῘ→AI")]
        [InlineData(90, "ᾊῘ→AI")]
        [InlineData(91, "ΑῙ→AI")]
        [InlineData(92, "ΆῙ→AI")]
        [InlineData(93, "ΆῙ→AI")]
        [InlineData(94, "ᾺῙ→AI")]
        [InlineData(95, "ᾸῙ→AI")]
        [InlineData(96, "ᾹῙ→AI")]
        [InlineData(97, "ἈῙ→AI")]
        [InlineData(98, "ἌῙ→AI")]
        [InlineData(99, "ἊῙ→AI")]
        [InlineData(100, "ᾎῙ→AI")]
        [InlineData(101, "ᾼῙ→AI")]
        [InlineData(102, "ἎῙ→AI")]
        [InlineData(103, "ᾈῙ→AI")]
        [InlineData(104, "ᾌῙ→AI")]
        [InlineData(105, "ᾊῙ→AI")]
        [InlineData(106, "ΑἸ→AI")]
        [InlineData(107, "ΆἸ→AI")]
        [InlineData(108, "ΆἸ→AI")]
        [InlineData(109, "ᾺἸ→AI")]
        [InlineData(110, "ᾸἸ→AI")]
        [InlineData(111, "ᾹἸ→AI")]
        [InlineData(112, "ἈἸ→AI")]
        [InlineData(113, "ἌἸ→AI")]
        [InlineData(114, "ἊἸ→AI")]
        [InlineData(115, "ᾎἸ→AI")]
        [InlineData(116, "ᾼἸ→AI")]
        [InlineData(117, "ἎἸ→AI")]
        [InlineData(118, "ᾈἸ→AI")]
        [InlineData(119, "ᾌἸ→AI")]
        [InlineData(120, "ᾊἸ→AI")]
        [InlineData(121, "ΑἺ→AI")]
        [InlineData(122, "ΆἺ→AI")]
        [InlineData(123, "ΆἺ→AI")]
        [InlineData(124, "ᾺἺ→AI")]
        [InlineData(125, "ᾸἺ→AI")]
        [InlineData(126, "ᾹἺ→AI")]
        [InlineData(127, "ἈἺ→AI")]
        [InlineData(128, "ἌἺ→AI")]
        [InlineData(129, "ἊἺ→AI")]
        [InlineData(130, "ᾎἺ→AI")]
        [InlineData(131, "ᾼἺ→AI")]
        [InlineData(132, "ἎἺ→AI")]
        [InlineData(133, "ᾈἺ→AI")]
        [InlineData(134, "ᾌἺ→AI")]
        [InlineData(135, "ᾊἺ→AI")]
        [InlineData(136, "ΑἼ→AI")]
        [InlineData(137, "ΆἼ→AI")]
        [InlineData(138, "ΆἼ→AI")]
        [InlineData(139, "ᾺἼ→AI")]
        [InlineData(140, "ᾸἼ→AI")]
        [InlineData(141, "ᾹἼ→AI")]
        [InlineData(142, "ἈἼ→AI")]
        [InlineData(143, "ἌἼ→AI")]
        [InlineData(144, "ἊἼ→AI")]
        [InlineData(145, "ᾎἼ→AI")]
        [InlineData(146, "ᾼἼ→AI")]
        [InlineData(147, "ἎἼ→AI")]
        [InlineData(148, "ᾈἼ→AI")]
        [InlineData(149, "ᾌἼ→AI")]
        [InlineData(150, "ᾊἼ→AI")]
        [InlineData(151, "ΑἾ→AI")]  // 1f3e
        [InlineData(152, "ΆἾ→AI")]
        [InlineData(153, "ΆἾ→AI")]
        [InlineData(154, "ᾺἾ→AI")]
        [InlineData(155, "ᾸἾ→AI")]
        [InlineData(156, "ᾹἾ→AI")]
        [InlineData(157, "ἈἾ→AI")]
        [InlineData(158, "ἌἾ→AI")]
        [InlineData(159, "ἊἾ→AI")]
        [InlineData(160, "ᾎἾ→AI")]
        [InlineData(161, "ᾼἾ→AI")]
        [InlineData(162, "ἎἾ→AI")]
        [InlineData(163, "ᾈἾ→AI")]
        [InlineData(164, "ᾌἾ→AI")]
        [InlineData(165, "ᾊἾ→AI")]
        // 共 166 个

        public void test_AI(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        // 集合（upper_alpha_without_dasia）+ 集合（lower_iota_with_dasia）→Hai；
        [InlineData(1, "Αἱ→Hai")]
        [InlineData(2, "Άἱ→Hai")]
        [InlineData(3, "Άἱ→Hai")]
        [InlineData(4, "Ὰἱ→Hai")]
        [InlineData(5, "Ᾰἱ→Hai")]
        [InlineData(6, "Ᾱἱ→Hai")]
        [InlineData(7, "Ἀἱ→Hai")]
        [InlineData(8, "Ἄἱ→Hai")]
        [InlineData(9, "Ἂἱ→Hai")]
        [InlineData(10, "ᾎἱ→Hai")]
        [InlineData(11, "ᾼἱ→Hai")]
        [InlineData(12, "Ἆἱ→Hai")]
        [InlineData(13, "ᾈἱ→Hai")]
        [InlineData(14, "ᾌἱ→Hai")]
        [InlineData(15, "ᾊἱ→Hai")]
        [InlineData(16, "Αἵ→Hai")]
        [InlineData(17, "Άἵ→Hai")]
        [InlineData(18, "Άἵ→Hai")]
        [InlineData(19, "Ὰἵ→Hai")]
        [InlineData(20, "Ᾰἵ→Hai")]
        [InlineData(21, "Ᾱἵ→Hai")]
        [InlineData(22, "Ἀἵ→Hai")]
        [InlineData(23, "Ἄἵ→Hai")]
        [InlineData(24, "Ἂἵ→Hai")]
        [InlineData(25, "ᾎἵ→Hai")]
        [InlineData(26, "ᾼἵ→Hai")]
        [InlineData(27, "Ἆἵ→Hai")]
        [InlineData(28, "ᾈἵ→Hai")]
        [InlineData(29, "ᾌἵ→Hai")]
        [InlineData(30, "ᾊἵ→Hai")]
        [InlineData(31, "Αἳ→Hai")]
        [InlineData(32, "Άἳ→Hai")]
        [InlineData(33, "Άἳ→Hai")]
        [InlineData(34, "Ὰἳ→Hai")]
        [InlineData(35, "Ᾰἳ→Hai")]
        [InlineData(36, "Ᾱἳ→Hai")]
        [InlineData(37, "Ἀἳ→Hai")]
        [InlineData(38, "Ἄἳ→Hai")]
        [InlineData(39, "Ἂἳ→Hai")]
        [InlineData(40, "ᾎἳ→Hai")]
        [InlineData(41, "ᾼἳ→Hai")]
        [InlineData(42, "Ἆἳ→Hai")]
        [InlineData(43, "ᾈἳ→Hai")]
        [InlineData(44, "ᾌἳ→Hai")]
        [InlineData(45, "ᾊἳ→Hai")]
        [InlineData(46, "Αἷ→Hai")]
        [InlineData(47, "Άἷ→Hai")]
        [InlineData(48, "Άἷ→Hai")]
        [InlineData(49, "Ὰἷ→Hai")]
        [InlineData(50, "Ᾰἷ→Hai")]
        [InlineData(51, "Ᾱἷ→Hai")]
        [InlineData(52, "Ἀἷ→Hai")]
        [InlineData(53, "Ἄἷ→Hai")]
        [InlineData(54, "Ἂἷ→Hai")]
        [InlineData(55, "ᾎἷ→Hai")]
        [InlineData(56, "ᾼἷ→Hai")]
        [InlineData(57, "Ἆἷ→Hai")]
        [InlineData(58, "ᾈἷ→Hai")]
        [InlineData(59, "ᾌἷ→Hai")]
        [InlineData(60, "ᾊἷ→Hai")]
        // 共 61 个
        public void test_Hai(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        // 集合（upper_alpha_without_dasia）+ 集合（lower_iota_without_dasia）→Ai；
        [InlineData(1, "Αι→Ai")]
        [InlineData(2, "Άι→Ai")]
        [InlineData(3, "Άι→Ai")]
        [InlineData(4, "Ὰι→Ai")]
        [InlineData(5, "Ᾰι→Ai")]
        [InlineData(6, "Ᾱι→Ai")]
        [InlineData(7, "Ἀι→Ai")]
        [InlineData(8, "Ἄι→Ai")]
        [InlineData(9, "Ἂι→Ai")]
        [InlineData(10, "ᾎι→Ai")]
        [InlineData(11, "ᾼι→Ai")]
        [InlineData(12, "Ἆι→Ai")]
        [InlineData(13, "ᾈι→Ai")]
        [InlineData(14, "ᾌι→Ai")]
        [InlineData(15, "ᾊι→Ai")]
        [InlineData(16, "Αί→Ai")]
        [InlineData(17, "Άί→Ai")]
        [InlineData(18, "Άί→Ai")]
        [InlineData(19, "Ὰί→Ai")]
        [InlineData(20, "Ᾰί→Ai")]
        [InlineData(21, "Ᾱί→Ai")]
        [InlineData(22, "Ἀί→Ai")]
        [InlineData(23, "Ἄί→Ai")]
        [InlineData(24, "Ἂί→Ai")]
        [InlineData(25, "ᾎί→Ai")]
        [InlineData(26, "ᾼί→Ai")]
        [InlineData(27, "Ἆί→Ai")]
        [InlineData(28, "ᾈί→Ai")]
        [InlineData(29, "ᾌί→Ai")]
        [InlineData(30, "ᾊί→Ai")]
        [InlineData(31, "Αί→Ai")]
        [InlineData(32, "Άί→Ai")]
        [InlineData(33, "Άί→Ai")]
        [InlineData(34, "Ὰί→Ai")]
        [InlineData(35, "Ᾰί→Ai")]
        [InlineData(36, "Ᾱί→Ai")]
        [InlineData(37, "Ἀί→Ai")]
        [InlineData(38, "Ἄί→Ai")]
        [InlineData(39, "Ἂί→Ai")]
        [InlineData(40, "ᾎί→Ai")]
        [InlineData(41, "ᾼί→Ai")]
        [InlineData(42, "Ἆί→Ai")]
        [InlineData(43, "ᾈί→Ai")]
        [InlineData(44, "ᾌί→Ai")]
        [InlineData(45, "ᾊί→Ai")]
        [InlineData(46, "Αὶ→Ai")]
        [InlineData(47, "Άὶ→Ai")]
        [InlineData(48, "Άὶ→Ai")]
        [InlineData(49, "Ὰὶ→Ai")]
        [InlineData(50, "Ᾰὶ→Ai")]
        [InlineData(51, "Ᾱὶ→Ai")]
        [InlineData(52, "Ἀὶ→Ai")]
        [InlineData(53, "Ἄὶ→Ai")]
        [InlineData(54, "Ἂὶ→Ai")]
        [InlineData(55, "ᾎὶ→Ai")]
        [InlineData(56, "ᾼὶ→Ai")]
        [InlineData(57, "Ἆὶ→Ai")]
        [InlineData(58, "ᾈὶ→Ai")]
        [InlineData(59, "ᾌὶ→Ai")]
        [InlineData(60, "ᾊὶ→Ai")]
        [InlineData(61, "Αϊ→Ai")]
        [InlineData(62, "Άϊ→Ai")]
        [InlineData(63, "Άϊ→Ai")]
        [InlineData(64, "Ὰϊ→Ai")]
        [InlineData(65, "Ᾰϊ→Ai")]
        [InlineData(66, "Ᾱϊ→Ai")]
        [InlineData(67, "Ἀϊ→Ai")]
        [InlineData(68, "Ἄϊ→Ai")]
        [InlineData(69, "Ἂϊ→Ai")]
        [InlineData(70, "ᾎϊ→Ai")]
        [InlineData(71, "ᾼϊ→Ai")]
        [InlineData(72, "Ἆϊ→Ai")]
        [InlineData(73, "ᾈϊ→Ai")]
        [InlineData(74, "ᾌϊ→Ai")]
        [InlineData(75, "ᾊϊ→Ai")]
        [InlineData(76, "Αῐ→Ai")]
        [InlineData(77, "Άῐ→Ai")]
        [InlineData(78, "Άῐ→Ai")]
        [InlineData(79, "Ὰῐ→Ai")]
        [InlineData(80, "Ᾰῐ→Ai")]
        [InlineData(81, "Ᾱῐ→Ai")]
        [InlineData(82, "Ἀῐ→Ai")]
        [InlineData(83, "Ἄῐ→Ai")]
        [InlineData(84, "Ἂῐ→Ai")]
        [InlineData(85, "ᾎῐ→Ai")]
        [InlineData(86, "ᾼῐ→Ai")]
        [InlineData(87, "Ἆῐ→Ai")]
        [InlineData(88, "ᾈῐ→Ai")]
        [InlineData(89, "ᾌῐ→Ai")]
        [InlineData(90, "ᾊῐ→Ai")]
        [InlineData(91, "Αῑ→Ai")]
        [InlineData(92, "Άῑ→Ai")]
        [InlineData(93, "Άῑ→Ai")]
        [InlineData(94, "Ὰῑ→Ai")]
        [InlineData(95, "Ᾰῑ→Ai")]
        [InlineData(96, "Ᾱῑ→Ai")]
        [InlineData(97, "Ἀῑ→Ai")]
        [InlineData(98, "Ἄῑ→Ai")]
        [InlineData(99, "Ἂῑ→Ai")]
        [InlineData(100, "ᾎῑ→Ai")]
        [InlineData(101, "ᾼῑ→Ai")]
        [InlineData(102, "Ἆῑ→Ai")]
        [InlineData(103, "ᾈῑ→Ai")]
        [InlineData(104, "ᾌῑ→Ai")]
        [InlineData(105, "ᾊῑ→Ai")]
        [InlineData(106, "Αΐ→Ai")]
        [InlineData(107, "Άΐ→Ai")]
        [InlineData(108, "Άΐ→Ai")]
        [InlineData(109, "Ὰΐ→Ai")]
        [InlineData(110, "Ᾰΐ→Ai")]
        [InlineData(111, "Ᾱΐ→Ai")]
        [InlineData(112, "Ἀΐ→Ai")]
        [InlineData(113, "Ἄΐ→Ai")]
        [InlineData(114, "Ἂΐ→Ai")]
        [InlineData(115, "ᾎΐ→Ai")]
        [InlineData(116, "ᾼΐ→Ai")]
        [InlineData(117, "Ἆΐ→Ai")]
        [InlineData(118, "ᾈΐ→Ai")]
        [InlineData(119, "ᾌΐ→Ai")]
        [InlineData(120, "ᾊΐ→Ai")]
        [InlineData(121, "Αΐ→Ai")]
        [InlineData(122, "Άΐ→Ai")]
        [InlineData(123, "Άΐ→Ai")]
        [InlineData(124, "Ὰΐ→Ai")]
        [InlineData(125, "Ᾰΐ→Ai")]
        [InlineData(126, "Ᾱΐ→Ai")]
        [InlineData(127, "Ἀΐ→Ai")]
        [InlineData(128, "Ἄΐ→Ai")]
        [InlineData(129, "Ἂΐ→Ai")]
        [InlineData(130, "ᾎΐ→Ai")]
        [InlineData(131, "ᾼΐ→Ai")]
        [InlineData(132, "Ἆΐ→Ai")]
        [InlineData(133, "ᾈΐ→Ai")]
        [InlineData(134, "ᾌΐ→Ai")]
        [InlineData(135, "ᾊΐ→Ai")]
        [InlineData(136, "Αῒ→Ai")]
        [InlineData(137, "Άῒ→Ai")]
        [InlineData(138, "Άῒ→Ai")]
        [InlineData(139, "Ὰῒ→Ai")]
        [InlineData(140, "Ᾰῒ→Ai")]
        [InlineData(141, "Ᾱῒ→Ai")]
        [InlineData(142, "Ἀῒ→Ai")]
        [InlineData(143, "Ἄῒ→Ai")]
        [InlineData(144, "Ἂῒ→Ai")]
        [InlineData(145, "ᾎῒ→Ai")]
        [InlineData(146, "ᾼῒ→Ai")]
        [InlineData(147, "Ἆῒ→Ai")]
        [InlineData(148, "ᾈῒ→Ai")]
        [InlineData(149, "ᾌῒ→Ai")]
        [InlineData(150, "ᾊῒ→Ai")]
        [InlineData(151, "Αἰ→Ai")]
        [InlineData(152, "Άἰ→Ai")]
        [InlineData(153, "Άἰ→Ai")]
        [InlineData(154, "Ὰἰ→Ai")]
        [InlineData(155, "Ᾰἰ→Ai")]
        [InlineData(156, "Ᾱἰ→Ai")]
        [InlineData(157, "Ἀἰ→Ai")]
        [InlineData(158, "Ἄἰ→Ai")]
        [InlineData(159, "Ἂἰ→Ai")]
        [InlineData(160, "ᾎἰ→Ai")]
        [InlineData(161, "ᾼἰ→Ai")]
        [InlineData(162, "Ἆἰ→Ai")]
        [InlineData(163, "ᾈἰ→Ai")]
        [InlineData(164, "ᾌἰ→Ai")]
        [InlineData(165, "ᾊἰ→Ai")]
        [InlineData(166, "Αἴ→Ai")]
        [InlineData(167, "Άἴ→Ai")]
        [InlineData(168, "Άἴ→Ai")]
        [InlineData(169, "Ὰἴ→Ai")]
        [InlineData(170, "Ᾰἴ→Ai")]
        [InlineData(171, "Ᾱἴ→Ai")]
        [InlineData(172, "Ἀἴ→Ai")]
        [InlineData(173, "Ἄἴ→Ai")]
        [InlineData(174, "Ἂἴ→Ai")]
        [InlineData(175, "ᾎἴ→Ai")]
        [InlineData(176, "ᾼἴ→Ai")]
        [InlineData(177, "Ἆἴ→Ai")]
        [InlineData(178, "ᾈἴ→Ai")]
        [InlineData(179, "ᾌἴ→Ai")]
        [InlineData(180, "ᾊἴ→Ai")]
        [InlineData(181, "Αἲ→Ai")]
        [InlineData(182, "Άἲ→Ai")]
        [InlineData(183, "Άἲ→Ai")]
        [InlineData(184, "Ὰἲ→Ai")]
        [InlineData(185, "Ᾰἲ→Ai")]
        [InlineData(186, "Ᾱἲ→Ai")]
        [InlineData(187, "Ἀἲ→Ai")]
        [InlineData(188, "Ἄἲ→Ai")]
        [InlineData(189, "Ἂἲ→Ai")]
        [InlineData(190, "ᾎἲ→Ai")]
        [InlineData(191, "ᾼἲ→Ai")]
        [InlineData(192, "Ἆἲ→Ai")]
        [InlineData(193, "ᾈἲ→Ai")]
        [InlineData(194, "ᾌἲ→Ai")]
        [InlineData(195, "ᾊἲ→Ai")]
        [InlineData(196, "Αῖ→Ai")]
        [InlineData(197, "Άῖ→Ai")]
        [InlineData(198, "Άῖ→Ai")]
        [InlineData(199, "Ὰῖ→Ai")]
        [InlineData(200, "Ᾰῖ→Ai")]
        [InlineData(201, "Ᾱῖ→Ai")]
        [InlineData(202, "Ἀῖ→Ai")]
        [InlineData(203, "Ἄῖ→Ai")]
        [InlineData(204, "Ἂῖ→Ai")]
        [InlineData(205, "ᾎῖ→Ai")]
        [InlineData(206, "ᾼῖ→Ai")]
        [InlineData(207, "Ἆῖ→Ai")]
        [InlineData(208, "ᾈῖ→Ai")]
        [InlineData(209, "ᾌῖ→Ai")]
        [InlineData(210, "ᾊῖ→Ai")]
        [InlineData(211, "Αῗ→Ai")]
        [InlineData(212, "Άῗ→Ai")]
        [InlineData(213, "Άῗ→Ai")]
        [InlineData(214, "Ὰῗ→Ai")]
        [InlineData(215, "Ᾰῗ→Ai")]
        [InlineData(216, "Ᾱῗ→Ai")]
        [InlineData(217, "Ἀῗ→Ai")]
        [InlineData(218, "Ἄῗ→Ai")]
        [InlineData(219, "Ἂῗ→Ai")]
        [InlineData(220, "ᾎῗ→Ai")]
        [InlineData(221, "ᾼῗ→Ai")]
        [InlineData(222, "Ἆῗ→Ai")]
        [InlineData(223, "ᾈῗ→Ai")]
        [InlineData(224, "ᾌῗ→Ai")]
        [InlineData(225, "ᾊῗ→Ai")]
        [InlineData(226, "Αἶ→Ai")]
        [InlineData(227, "Άἶ→Ai")]
        [InlineData(228, "Άἶ→Ai")]
        [InlineData(229, "Ὰἶ→Ai")]
        [InlineData(230, "Ᾰἶ→Ai")]
        [InlineData(231, "Ᾱἶ→Ai")]
        [InlineData(232, "Ἀἶ→Ai")]
        [InlineData(233, "Ἄἶ→Ai")]
        [InlineData(234, "Ἂἶ→Ai")]
        [InlineData(235, "ᾎἶ→Ai")]
        [InlineData(236, "ᾼἶ→Ai")]
        [InlineData(237, "Ἆἶ→Ai")]
        [InlineData(238, "ᾈἶ→Ai")]
        [InlineData(239, "ᾌἶ→Ai")]
        [InlineData(240, "ᾊἶ→Ai")]
        // 共 241 个
        public void test_Ai(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        // 集合（lower_alpha_without_dasia）+ 集合（lower_iota_with_dasia）→hai；
        [InlineData(1, "αἱ→hai")]
        [InlineData(2, "άἱ→hai")]
        [InlineData(3, "άἱ→hai")]
        [InlineData(4, "ὰἱ→hai")]
        [InlineData(5, "ᾰἱ→hai")]
        [InlineData(6, "ᾱἱ→hai")]
        [InlineData(7, "ᾷἱ→hai")]
        [InlineData(8, "ἀἱ→hai")]
        [InlineData(9, "ἄἱ→hai")]
        [InlineData(10, "ἂἱ→hai")]
        [InlineData(11, "ᾆἱ→hai")]
        [InlineData(12, "ᾶἱ→hai")]
        [InlineData(13, "ᾳἱ→hai")]
        [InlineData(14, "ᾴἱ→hai")]
        [InlineData(15, "ᾲἱ→hai")]
        [InlineData(16, "ἆἱ→hai")]
        [InlineData(17, "ᾀἱ→hai")]
        [InlineData(18, "ᾄἱ→hai")]
        [InlineData(19, "ᾂἱ→hai")]
        [InlineData(20, "αἵ→hai")]
        [InlineData(21, "άἵ→hai")]
        [InlineData(22, "άἵ→hai")]
        [InlineData(23, "ὰἵ→hai")]
        [InlineData(24, "ᾰἵ→hai")]
        [InlineData(25, "ᾱἵ→hai")]
        [InlineData(26, "ᾷἵ→hai")]
        [InlineData(27, "ἀἵ→hai")]
        [InlineData(28, "ἄἵ→hai")]
        [InlineData(29, "ἂἵ→hai")]
        [InlineData(30, "ᾆἵ→hai")]
        [InlineData(31, "ᾶἵ→hai")]
        [InlineData(32, "ᾳἵ→hai")]
        [InlineData(33, "ᾴἵ→hai")]
        [InlineData(34, "ᾲἵ→hai")]
        [InlineData(35, "ἆἵ→hai")]
        [InlineData(36, "ᾀἵ→hai")]
        [InlineData(37, "ᾄἵ→hai")]
        [InlineData(38, "ᾂἵ→hai")]
        [InlineData(39, "αἳ→hai")]
        [InlineData(40, "άἳ→hai")]
        [InlineData(41, "άἳ→hai")]
        [InlineData(42, "ὰἳ→hai")]
        [InlineData(43, "ᾰἳ→hai")]
        [InlineData(44, "ᾱἳ→hai")]
        [InlineData(45, "ᾷἳ→hai")]
        [InlineData(46, "ἀἳ→hai")]
        [InlineData(47, "ἄἳ→hai")]
        [InlineData(48, "ἂἳ→hai")]
        [InlineData(49, "ᾆἳ→hai")]
        [InlineData(50, "ᾶἳ→hai")]
        [InlineData(51, "ᾳἳ→hai")]
        [InlineData(52, "ᾴἳ→hai")]
        [InlineData(53, "ᾲἳ→hai")]
        [InlineData(54, "ἆἳ→hai")]
        [InlineData(55, "ᾀἳ→hai")]
        [InlineData(56, "ᾄἳ→hai")]
        [InlineData(57, "ᾂἳ→hai")]
        [InlineData(58, "αἷ→hai")]
        [InlineData(59, "άἷ→hai")]
        [InlineData(60, "άἷ→hai")]
        [InlineData(61, "ὰἷ→hai")]
        [InlineData(62, "ᾰἷ→hai")]
        [InlineData(63, "ᾱἷ→hai")]
        [InlineData(64, "ᾷἷ→hai")]
        [InlineData(65, "ἀἷ→hai")]
        [InlineData(66, "ἄἷ→hai")]
        [InlineData(67, "ἂἷ→hai")]
        [InlineData(68, "ᾆἷ→hai")]
        [InlineData(69, "ᾶἷ→hai")]
        [InlineData(70, "ᾳἷ→hai")]
        [InlineData(71, "ᾴἷ→hai")]
        [InlineData(72, "ᾲἷ→hai")]
        [InlineData(73, "ἆἷ→hai")]
        [InlineData(74, "ᾀἷ→hai")]
        [InlineData(75, "ᾄἷ→hai")]
        [InlineData(76, "ᾂἷ→hai")]
        // 共 77 个
        public void test_hai(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        // 集合（lower_alpha_without_dasia）+ 集合（lower_iota_without_dasia）→ai。
        [InlineData(1, "αι→ai")]
        [InlineData(2, "άι→ai")]
        [InlineData(3, "άι→ai")]
        [InlineData(4, "ὰι→ai")]
        [InlineData(5, "ᾰι→ai")]
        [InlineData(6, "ᾱι→ai")]
        [InlineData(7, "ᾷι→ai")]
        [InlineData(8, "ἀι→ai")]
        [InlineData(9, "ἄι→ai")]
        [InlineData(10, "ἂι→ai")]
        [InlineData(11, "ᾆι→ai")]
        [InlineData(12, "ᾶι→ai")]
        [InlineData(13, "ᾳι→ai")]
        [InlineData(14, "ᾴι→ai")]
        [InlineData(15, "ᾲι→ai")]
        [InlineData(16, "ἆι→ai")]
        [InlineData(17, "ᾀι→ai")]
        [InlineData(18, "ᾄι→ai")]
        [InlineData(19, "ᾂι→ai")]
        [InlineData(20, "αί→ai")]
        [InlineData(21, "άί→ai")]
        [InlineData(22, "άί→ai")]
        [InlineData(23, "ὰί→ai")]
        [InlineData(24, "ᾰί→ai")]
        [InlineData(25, "ᾱί→ai")]
        [InlineData(26, "ᾷί→ai")]
        [InlineData(27, "ἀί→ai")]
        [InlineData(28, "ἄί→ai")]
        [InlineData(29, "ἂί→ai")]
        [InlineData(30, "ᾆί→ai")]
        [InlineData(31, "ᾶί→ai")]
        [InlineData(32, "ᾳί→ai")]
        [InlineData(33, "ᾴί→ai")]
        [InlineData(34, "ᾲί→ai")]
        [InlineData(35, "ἆί→ai")]
        [InlineData(36, "ᾀί→ai")]
        [InlineData(37, "ᾄί→ai")]
        [InlineData(38, "ᾂί→ai")]
        [InlineData(39, "αί→ai")]
        [InlineData(40, "άί→ai")]
        [InlineData(41, "άί→ai")]
        [InlineData(42, "ὰί→ai")]
        [InlineData(43, "ᾰί→ai")]
        [InlineData(44, "ᾱί→ai")]
        [InlineData(45, "ᾷί→ai")]
        [InlineData(46, "ἀί→ai")]
        [InlineData(47, "ἄί→ai")]
        [InlineData(48, "ἂί→ai")]
        [InlineData(49, "ᾆί→ai")]
        [InlineData(50, "ᾶί→ai")]
        [InlineData(51, "ᾳί→ai")]
        [InlineData(52, "ᾴί→ai")]
        [InlineData(53, "ᾲί→ai")]
        [InlineData(54, "ἆί→ai")]
        [InlineData(55, "ᾀί→ai")]
        [InlineData(56, "ᾄί→ai")]
        [InlineData(57, "ᾂί→ai")]
        [InlineData(58, "αὶ→ai")]
        [InlineData(59, "άὶ→ai")]
        [InlineData(60, "άὶ→ai")]
        [InlineData(61, "ὰὶ→ai")]
        [InlineData(62, "ᾰὶ→ai")]
        [InlineData(63, "ᾱὶ→ai")]
        [InlineData(64, "ᾷὶ→ai")]
        [InlineData(65, "ἀὶ→ai")]
        [InlineData(66, "ἄὶ→ai")]
        [InlineData(67, "ἂὶ→ai")]
        [InlineData(68, "ᾆὶ→ai")]
        [InlineData(69, "ᾶὶ→ai")]
        [InlineData(70, "ᾳὶ→ai")]
        [InlineData(71, "ᾴὶ→ai")]
        [InlineData(72, "ᾲὶ→ai")]
        [InlineData(73, "ἆὶ→ai")]
        [InlineData(74, "ᾀὶ→ai")]
        [InlineData(75, "ᾄὶ→ai")]
        [InlineData(76, "ᾂὶ→ai")]
        [InlineData(77, "αϊ→ai")]
        [InlineData(78, "άϊ→ai")]
        [InlineData(79, "άϊ→ai")]
        [InlineData(80, "ὰϊ→ai")]
        [InlineData(81, "ᾰϊ→ai")]
        [InlineData(82, "ᾱϊ→ai")]
        [InlineData(83, "ᾷϊ→ai")]
        [InlineData(84, "ἀϊ→ai")]
        [InlineData(85, "ἄϊ→ai")]
        [InlineData(86, "ἂϊ→ai")]
        [InlineData(87, "ᾆϊ→ai")]
        [InlineData(88, "ᾶϊ→ai")]
        [InlineData(89, "ᾳϊ→ai")]
        [InlineData(90, "ᾴϊ→ai")]
        [InlineData(91, "ᾲϊ→ai")]
        [InlineData(92, "ἆϊ→ai")]
        [InlineData(93, "ᾀϊ→ai")]
        [InlineData(94, "ᾄϊ→ai")]
        [InlineData(95, "ᾂϊ→ai")]
        [InlineData(96, "αῐ→ai")]
        [InlineData(97, "άῐ→ai")]
        [InlineData(98, "άῐ→ai")]
        [InlineData(99, "ὰῐ→ai")]
        [InlineData(100, "ᾰῐ→ai")]
        [InlineData(101, "ᾱῐ→ai")]
        [InlineData(102, "ᾷῐ→ai")]
        [InlineData(103, "ἀῐ→ai")]
        [InlineData(104, "ἄῐ→ai")]
        [InlineData(105, "ἂῐ→ai")]
        [InlineData(106, "ᾆῐ→ai")]
        [InlineData(107, "ᾶῐ→ai")]
        [InlineData(108, "ᾳῐ→ai")]
        [InlineData(109, "ᾴῐ→ai")]
        [InlineData(110, "ᾲῐ→ai")]
        [InlineData(111, "ἆῐ→ai")]
        [InlineData(112, "ᾀῐ→ai")]
        [InlineData(113, "ᾄῐ→ai")]
        [InlineData(114, "ᾂῐ→ai")]
        [InlineData(115, "αῑ→ai")]
        [InlineData(116, "άῑ→ai")]
        [InlineData(117, "άῑ→ai")]
        [InlineData(118, "ὰῑ→ai")]
        [InlineData(119, "ᾰῑ→ai")]
        [InlineData(120, "ᾱῑ→ai")]
        [InlineData(121, "ᾷῑ→ai")]
        [InlineData(122, "ἀῑ→ai")]
        [InlineData(123, "ἄῑ→ai")]
        [InlineData(124, "ἂῑ→ai")]
        [InlineData(125, "ᾆῑ→ai")]
        [InlineData(126, "ᾶῑ→ai")]
        [InlineData(127, "ᾳῑ→ai")]
        [InlineData(128, "ᾴῑ→ai")]
        [InlineData(129, "ᾲῑ→ai")]
        [InlineData(130, "ἆῑ→ai")]
        [InlineData(131, "ᾀῑ→ai")]
        [InlineData(132, "ᾄῑ→ai")]
        [InlineData(133, "ᾂῑ→ai")]
        [InlineData(134, "αΐ→ai")]
        [InlineData(135, "άΐ→ai")]
        [InlineData(136, "άΐ→ai")]
        [InlineData(137, "ὰΐ→ai")]
        [InlineData(138, "ᾰΐ→ai")]
        [InlineData(139, "ᾱΐ→ai")]
        [InlineData(140, "ᾷΐ→ai")]
        [InlineData(141, "ἀΐ→ai")]
        [InlineData(142, "ἄΐ→ai")]
        [InlineData(143, "ἂΐ→ai")]
        [InlineData(144, "ᾆΐ→ai")]
        [InlineData(145, "ᾶΐ→ai")]
        [InlineData(146, "ᾳΐ→ai")]
        [InlineData(147, "ᾴΐ→ai")]
        [InlineData(148, "ᾲΐ→ai")]
        [InlineData(149, "ἆΐ→ai")]
        [InlineData(150, "ᾀΐ→ai")]
        [InlineData(151, "ᾄΐ→ai")]
        [InlineData(152, "ᾂΐ→ai")]
        [InlineData(153, "αΐ→ai")]
        [InlineData(154, "άΐ→ai")]
        [InlineData(155, "άΐ→ai")]
        [InlineData(156, "ὰΐ→ai")]
        [InlineData(157, "ᾰΐ→ai")]
        [InlineData(158, "ᾱΐ→ai")]
        [InlineData(159, "ᾷΐ→ai")]
        [InlineData(160, "ἀΐ→ai")]
        [InlineData(161, "ἄΐ→ai")]
        [InlineData(162, "ἂΐ→ai")]
        [InlineData(163, "ᾆΐ→ai")]
        [InlineData(164, "ᾶΐ→ai")]
        [InlineData(165, "ᾳΐ→ai")]
        [InlineData(166, "ᾴΐ→ai")]
        [InlineData(167, "ᾲΐ→ai")]
        [InlineData(168, "ἆΐ→ai")]
        [InlineData(169, "ᾀΐ→ai")]
        [InlineData(170, "ᾄΐ→ai")]
        [InlineData(171, "ᾂΐ→ai")]
        [InlineData(172, "αῒ→ai")]
        [InlineData(173, "άῒ→ai")]
        [InlineData(174, "άῒ→ai")]
        [InlineData(175, "ὰῒ→ai")]
        [InlineData(176, "ᾰῒ→ai")]
        [InlineData(177, "ᾱῒ→ai")]
        [InlineData(178, "ᾷῒ→ai")]
        [InlineData(179, "ἀῒ→ai")]
        [InlineData(180, "ἄῒ→ai")]
        [InlineData(181, "ἂῒ→ai")]
        [InlineData(182, "ᾆῒ→ai")]
        [InlineData(183, "ᾶῒ→ai")]
        [InlineData(184, "ᾳῒ→ai")]
        [InlineData(185, "ᾴῒ→ai")]
        [InlineData(186, "ᾲῒ→ai")]
        [InlineData(187, "ἆῒ→ai")]
        [InlineData(188, "ᾀῒ→ai")]
        [InlineData(189, "ᾄῒ→ai")]
        [InlineData(190, "ᾂῒ→ai")]
        [InlineData(191, "αἰ→ai")]
        [InlineData(192, "άἰ→ai")]
        [InlineData(193, "άἰ→ai")]
        [InlineData(194, "ὰἰ→ai")]
        [InlineData(195, "ᾰἰ→ai")]
        [InlineData(196, "ᾱἰ→ai")]
        [InlineData(197, "ᾷἰ→ai")]
        [InlineData(198, "ἀἰ→ai")]
        [InlineData(199, "ἄἰ→ai")]
        [InlineData(200, "ἂἰ→ai")]
        [InlineData(201, "ᾆἰ→ai")]
        [InlineData(202, "ᾶἰ→ai")]
        [InlineData(203, "ᾳἰ→ai")]
        [InlineData(204, "ᾴἰ→ai")]
        [InlineData(205, "ᾲἰ→ai")]
        [InlineData(206, "ἆἰ→ai")]
        [InlineData(207, "ᾀἰ→ai")]
        [InlineData(208, "ᾄἰ→ai")]
        [InlineData(209, "ᾂἰ→ai")]
        [InlineData(210, "αἴ→ai")]
        [InlineData(211, "άἴ→ai")]
        [InlineData(212, "άἴ→ai")]
        [InlineData(213, "ὰἴ→ai")]
        [InlineData(214, "ᾰἴ→ai")]
        [InlineData(215, "ᾱἴ→ai")]
        [InlineData(216, "ᾷἴ→ai")]
        [InlineData(217, "ἀἴ→ai")]
        [InlineData(218, "ἄἴ→ai")]
        [InlineData(219, "ἂἴ→ai")]
        [InlineData(220, "ᾆἴ→ai")]
        [InlineData(221, "ᾶἴ→ai")]
        [InlineData(222, "ᾳἴ→ai")]
        [InlineData(223, "ᾴἴ→ai")]
        [InlineData(224, "ᾲἴ→ai")]
        [InlineData(225, "ἆἴ→ai")]
        [InlineData(226, "ᾀἴ→ai")]
        [InlineData(227, "ᾄἴ→ai")]
        [InlineData(228, "ᾂἴ→ai")]
        [InlineData(229, "αἴ→ai")]
        [InlineData(230, "άἴ→ai")]
        [InlineData(231, "άἴ→ai")]
        [InlineData(232, "ὰἴ→ai")]
        [InlineData(233, "ᾰἴ→ai")]
        [InlineData(234, "ᾱἴ→ai")]
        [InlineData(235, "ᾷἴ→ai")]
        [InlineData(236, "ἀἴ→ai")]
        [InlineData(237, "ἄἴ→ai")]
        [InlineData(238, "ἂἴ→ai")]
        [InlineData(239, "ᾆἴ→ai")]
        [InlineData(240, "ᾶἴ→ai")]
        [InlineData(241, "ᾳἴ→ai")]
        [InlineData(242, "ᾴἴ→ai")]
        [InlineData(243, "ᾲἴ→ai")]
        [InlineData(244, "ἆἴ→ai")]
        [InlineData(245, "ᾀἴ→ai")]
        [InlineData(246, "ᾄἴ→ai")]
        [InlineData(247, "ᾂἴ→ai")]
        [InlineData(248, "αῖ→ai")]
        [InlineData(249, "άῖ→ai")]
        [InlineData(250, "άῖ→ai")]
        [InlineData(251, "ὰῖ→ai")]
        [InlineData(252, "ᾰῖ→ai")]
        [InlineData(253, "ᾱῖ→ai")]
        [InlineData(254, "ᾷῖ→ai")]
        [InlineData(255, "ἀῖ→ai")]
        [InlineData(256, "ἄῖ→ai")]
        [InlineData(257, "ἂῖ→ai")]
        [InlineData(258, "ᾆῖ→ai")]
        [InlineData(259, "ᾶῖ→ai")]
        [InlineData(260, "ᾳῖ→ai")]
        [InlineData(261, "ᾴῖ→ai")]
        [InlineData(262, "ᾲῖ→ai")]
        [InlineData(263, "ἆῖ→ai")]
        [InlineData(264, "ᾀῖ→ai")]
        [InlineData(265, "ᾄῖ→ai")]
        [InlineData(266, "ᾂῖ→ai")]
        [InlineData(267, "αῗ→ai")]
        [InlineData(268, "άῗ→ai")]
        [InlineData(269, "άῗ→ai")]
        [InlineData(270, "ὰῗ→ai")]
        [InlineData(271, "ᾰῗ→ai")]
        [InlineData(272, "ᾱῗ→ai")]
        [InlineData(273, "ᾷῗ→ai")]
        [InlineData(274, "ἀῗ→ai")]
        [InlineData(275, "ἄῗ→ai")]
        [InlineData(276, "ἂῗ→ai")]
        [InlineData(277, "ᾆῗ→ai")]
        [InlineData(278, "ᾶῗ→ai")]
        [InlineData(279, "ᾳῗ→ai")]
        [InlineData(280, "ᾴῗ→ai")]
        [InlineData(281, "ᾲῗ→ai")]
        [InlineData(282, "ἆῗ→ai")]
        [InlineData(283, "ᾀῗ→ai")]
        [InlineData(284, "ᾄῗ→ai")]
        [InlineData(285, "ᾂῗ→ai")]
        [InlineData(286, "αἶ→ai")]
        [InlineData(287, "άἶ→ai")]
        [InlineData(288, "άἶ→ai")]
        [InlineData(289, "ὰἶ→ai")]
        [InlineData(290, "ᾰἶ→ai")]
        [InlineData(291, "ᾱἶ→ai")]
        [InlineData(292, "ᾷἶ→ai")]
        [InlineData(293, "ἀἶ→ai")]
        [InlineData(294, "ἄἶ→ai")]
        [InlineData(295, "ἂἶ→ai")]
        [InlineData(296, "ᾆἶ→ai")]
        [InlineData(297, "ᾶἶ→ai")]
        [InlineData(298, "ᾳἶ→ai")]
        [InlineData(299, "ᾴἶ→ai")]
        [InlineData(300, "ᾲἶ→ai")]
        [InlineData(301, "ἆἶ→ai")]
        [InlineData(302, "ᾀἶ→ai")]
        [InlineData(303, "ᾄἶ→ai")]
        [InlineData(304, "ᾂἶ→ai")]
        // 共 305 个
        public void test_ai(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        // 集合（upper_alpha_without_dasia）+ 集合（upper_upsilon_with_dasia）→HAU；
        // 集合（upper_alpha_without_dasia）+ 集合（upper_upsilon_with_dasia）→HAU
        [InlineData(1, "ΑὙ→HAU")]
        [InlineData(2, "ΆὙ→HAU")]
        [InlineData(3, "ΆὙ→HAU")]
        [InlineData(4, "ᾺὙ→HAU")]
        [InlineData(5, "ᾸὙ→HAU")]
        [InlineData(6, "ᾹὙ→HAU")]
        [InlineData(7, "ἈὙ→HAU")]
        [InlineData(8, "ἌὙ→HAU")]
        [InlineData(9, "ἊὙ→HAU")]
        [InlineData(10, "ᾎὙ→HAU")]
        [InlineData(11, "ᾼὙ→HAU")]
        [InlineData(12, "ἎὙ→HAU")]
        [InlineData(13, "ᾈὙ→HAU")]
        [InlineData(14, "ᾌὙ→HAU")]
        [InlineData(15, "ᾊὙ→HAU")]
        [InlineData(16, "ΑὝ→HAU")]
        [InlineData(17, "ΆὝ→HAU")]
        [InlineData(18, "ΆὝ→HAU")]
        [InlineData(19, "ᾺὝ→HAU")]
        [InlineData(20, "ᾸὝ→HAU")]
        [InlineData(21, "ᾹὝ→HAU")]
        [InlineData(22, "ἈὝ→HAU")]
        [InlineData(23, "ἌὝ→HAU")]
        [InlineData(24, "ἊὝ→HAU")]
        [InlineData(25, "ᾎὝ→HAU")]
        [InlineData(26, "ᾼὝ→HAU")]
        [InlineData(27, "ἎὝ→HAU")]
        [InlineData(28, "ᾈὝ→HAU")]
        [InlineData(29, "ᾌὝ→HAU")]
        [InlineData(30, "ᾊὝ→HAU")]
        [InlineData(31, "ΑὛ→HAU")]
        [InlineData(32, "ΆὛ→HAU")]
        [InlineData(33, "ΆὛ→HAU")]
        [InlineData(34, "ᾺὛ→HAU")]
        [InlineData(35, "ᾸὛ→HAU")]
        [InlineData(36, "ᾹὛ→HAU")]
        [InlineData(37, "ἈὛ→HAU")]
        [InlineData(38, "ἌὛ→HAU")]
        [InlineData(39, "ἊὛ→HAU")]
        [InlineData(40, "ᾎὛ→HAU")]
        [InlineData(41, "ᾼὛ→HAU")]
        [InlineData(42, "ἎὛ→HAU")]
        [InlineData(43, "ᾈὛ→HAU")]
        [InlineData(44, "ᾌὛ→HAU")]
        [InlineData(45, "ᾊὛ→HAU")]
        [InlineData(46, "ΑὟ→HAU")]
        [InlineData(47, "ΆὟ→HAU")]
        [InlineData(48, "ΆὟ→HAU")]
        [InlineData(49, "ᾺὟ→HAU")]
        [InlineData(50, "ᾸὟ→HAU")]
        [InlineData(51, "ᾹὟ→HAU")]
        [InlineData(52, "ἈὟ→HAU")]
        [InlineData(53, "ἌὟ→HAU")]
        [InlineData(54, "ἊὟ→HAU")]
        [InlineData(55, "ᾎὟ→HAU")]
        [InlineData(56, "ᾼὟ→HAU")]
        [InlineData(57, "ἎὟ→HAU")]
        [InlineData(58, "ᾈὟ→HAU")]
        [InlineData(59, "ᾌὟ→HAU")]
        [InlineData(60, "ᾊὟ→HAU")]
        // 共 61 个
        public void test_HAU(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }


        [Theory]
        //集合（upper_alpha_without_dasia）+ 集合（upper_upsilon_without_dasia）→AU；
        // 集合（upper_alpha_without_dasia）+ 集合（upper_upsilon_without_dasia）→AU
        [InlineData(1, "ΑΥ→AU")]
        [InlineData(2, "ΆΥ→AU")]
        [InlineData(3, "ΆΥ→AU")]
        [InlineData(4, "ᾺΥ→AU")]
        [InlineData(5, "ᾸΥ→AU")]
        [InlineData(6, "ᾹΥ→AU")]
        [InlineData(7, "ἈΥ→AU")]
        [InlineData(8, "ἌΥ→AU")]
        [InlineData(9, "ἊΥ→AU")]
        [InlineData(10, "ᾎΥ→AU")]
        [InlineData(11, "ᾼΥ→AU")]
        [InlineData(12, "ἎΥ→AU")]
        [InlineData(13, "ᾈΥ→AU")]
        [InlineData(14, "ᾌΥ→AU")]
        [InlineData(15, "ᾊΥ→AU")]
        [InlineData(16, "ΑΎ→AU")]
        [InlineData(17, "ΆΎ→AU")]
        [InlineData(18, "ΆΎ→AU")]
        [InlineData(19, "ᾺΎ→AU")]
        [InlineData(20, "ᾸΎ→AU")]
        [InlineData(21, "ᾹΎ→AU")]
        [InlineData(22, "ἈΎ→AU")]
        [InlineData(23, "ἌΎ→AU")]
        [InlineData(24, "ἊΎ→AU")]
        [InlineData(25, "ᾎΎ→AU")]
        [InlineData(26, "ᾼΎ→AU")]
        [InlineData(27, "ἎΎ→AU")]
        [InlineData(28, "ᾈΎ→AU")]
        [InlineData(29, "ᾌΎ→AU")]
        [InlineData(30, "ᾊΎ→AU")]
        [InlineData(31, "ΑΎ→AU")]
        [InlineData(32, "ΆΎ→AU")]
        [InlineData(33, "ΆΎ→AU")]
        [InlineData(34, "ᾺΎ→AU")]
        [InlineData(35, "ᾸΎ→AU")]
        [InlineData(36, "ᾹΎ→AU")]
        [InlineData(37, "ἈΎ→AU")]
        [InlineData(38, "ἌΎ→AU")]
        [InlineData(39, "ἊΎ→AU")]
        [InlineData(40, "ᾎΎ→AU")]
        [InlineData(41, "ᾼΎ→AU")]
        [InlineData(42, "ἎΎ→AU")]
        [InlineData(43, "ᾈΎ→AU")]
        [InlineData(44, "ᾌΎ→AU")]
        [InlineData(45, "ᾊΎ→AU")]
        [InlineData(46, "ΑῪ→AU")]
        [InlineData(47, "ΆῪ→AU")]
        [InlineData(48, "ΆῪ→AU")]
        [InlineData(49, "ᾺῪ→AU")]
        [InlineData(50, "ᾸῪ→AU")]
        [InlineData(51, "ᾹῪ→AU")]
        [InlineData(52, "ἈῪ→AU")]
        [InlineData(53, "ἌῪ→AU")]
        [InlineData(54, "ἊῪ→AU")]
        [InlineData(55, "ᾎῪ→AU")]
        [InlineData(56, "ᾼῪ→AU")]
        [InlineData(57, "ἎῪ→AU")]
        [InlineData(58, "ᾈῪ→AU")]
        [InlineData(59, "ᾌῪ→AU")]
        [InlineData(60, "ᾊῪ→AU")]
        [InlineData(61, "ΑΫ→AU")]
        [InlineData(62, "ΆΫ→AU")]
        [InlineData(63, "ΆΫ→AU")]
        [InlineData(64, "ᾺΫ→AU")]
        [InlineData(65, "ᾸΫ→AU")]
        [InlineData(66, "ᾹΫ→AU")]
        [InlineData(67, "ἈΫ→AU")]
        [InlineData(68, "ἌΫ→AU")]
        [InlineData(69, "ἊΫ→AU")]
        [InlineData(70, "ᾎΫ→AU")]
        [InlineData(71, "ᾼΫ→AU")]
        [InlineData(72, "ἎΫ→AU")]
        [InlineData(73, "ᾈΫ→AU")]
        [InlineData(74, "ᾌΫ→AU")]
        [InlineData(75, "ᾊΫ→AU")]
        [InlineData(76, "ΑῨ→AU")]
        [InlineData(77, "ΆῨ→AU")]
        [InlineData(78, "ΆῨ→AU")]
        [InlineData(79, "ᾺῨ→AU")]
        [InlineData(80, "ᾸῨ→AU")]
        [InlineData(81, "ᾹῨ→AU")]
        [InlineData(82, "ἈῨ→AU")]
        [InlineData(83, "ἌῨ→AU")]
        [InlineData(84, "ἊῨ→AU")]
        [InlineData(85, "ᾎῨ→AU")]
        [InlineData(86, "ᾼῨ→AU")]
        [InlineData(87, "ἎῨ→AU")]
        [InlineData(88, "ᾈῨ→AU")]
        [InlineData(89, "ᾌῨ→AU")]
        [InlineData(90, "ᾊῨ→AU")]
        [InlineData(91, "ΑῩ→AU")]
        [InlineData(92, "ΆῩ→AU")]
        [InlineData(93, "ΆῩ→AU")]
        [InlineData(94, "ᾺῩ→AU")]
        [InlineData(95, "ᾸῩ→AU")]
        [InlineData(96, "ᾹῩ→AU")]
        [InlineData(97, "ἈῩ→AU")]
        [InlineData(98, "ἌῩ→AU")]
        [InlineData(99, "ἊῩ→AU")]
        [InlineData(100, "ᾎῩ→AU")]
        [InlineData(101, "ᾼῩ→AU")]
        [InlineData(102, "ἎῩ→AU")]
        [InlineData(103, "ᾈῩ→AU")]
        [InlineData(104, "ᾌῩ→AU")]
        [InlineData(105, "ᾊῩ→AU")]
        [InlineData(106, "Αϒ→AU")]
        [InlineData(107, "Άϒ→AU")]
        [InlineData(108, "Άϒ→AU")]
        [InlineData(109, "Ὰϒ→AU")]
        [InlineData(110, "Ᾰϒ→AU")]
        [InlineData(111, "Ᾱϒ→AU")]
        [InlineData(112, "Ἀϒ→AU")]
        [InlineData(113, "Ἄϒ→AU")]
        [InlineData(114, "Ἂϒ→AU")]
        [InlineData(115, "ᾎϒ→AU")]
        [InlineData(116, "ᾼϒ→AU")]
        [InlineData(117, "Ἆϒ→AU")]
        [InlineData(118, "ᾈϒ→AU")]
        [InlineData(119, "ᾌϒ→AU")]
        [InlineData(120, "ᾊϒ→AU")]
        [InlineData(121, "Αϓ→AU")]
        [InlineData(122, "Άϓ→AU")]
        [InlineData(123, "Άϓ→AU")]
        [InlineData(124, "Ὰϓ→AU")]
        [InlineData(125, "Ᾰϓ→AU")]
        [InlineData(126, "Ᾱϓ→AU")]
        [InlineData(127, "Ἀϓ→AU")]
        [InlineData(128, "Ἄϓ→AU")]
        [InlineData(129, "Ἂϓ→AU")]
        [InlineData(130, "ᾎϓ→AU")]
        [InlineData(131, "ᾼϓ→AU")]
        [InlineData(132, "Ἆϓ→AU")]
        [InlineData(133, "ᾈϓ→AU")]
        [InlineData(134, "ᾌϓ→AU")]
        [InlineData(135, "ᾊϓ→AU")]
        [InlineData(136, "Αϔ→AU")]
        [InlineData(137, "Άϔ→AU")]
        [InlineData(138, "Άϔ→AU")]
        [InlineData(139, "Ὰϔ→AU")]
        [InlineData(140, "Ᾰϔ→AU")]
        [InlineData(141, "Ᾱϔ→AU")]
        [InlineData(142, "Ἀϔ→AU")]
        [InlineData(143, "Ἄϔ→AU")]
        [InlineData(144, "Ἂϔ→AU")]
        [InlineData(145, "ᾎϔ→AU")]
        [InlineData(146, "ᾼϔ→AU")]
        [InlineData(147, "Ἆϔ→AU")]
        [InlineData(148, "ᾈϔ→AU")]
        [InlineData(149, "ᾌϔ→AU")]
        [InlineData(150, "ᾊϔ→AU")]
        // 共 151 个        
        public void test_AU(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        //集合（upper_alpha_without_dasia）+ 集合（lower_upsilon_with_dasia）→Hau；
        // 集合（upper_alpha_without_dasia）+ 集合（lower_upsilon_with_dasia）→Hau
        [InlineData(1, "Αὑ→Hau")]
        [InlineData(2, "Άὑ→Hau")]
        [InlineData(3, "Άὑ→Hau")]
        [InlineData(4, "Ὰὑ→Hau")]
        [InlineData(5, "Ᾰὑ→Hau")]
        [InlineData(6, "Ᾱὑ→Hau")]
        [InlineData(7, "Ἀὑ→Hau")]
        [InlineData(8, "Ἄὑ→Hau")]
        [InlineData(9, "Ἂὑ→Hau")]
        [InlineData(10, "ᾎὑ→Hau")]
        [InlineData(11, "ᾼὑ→Hau")]
        [InlineData(12, "Ἆὑ→Hau")]
        [InlineData(13, "ᾈὑ→Hau")]
        [InlineData(14, "ᾌὑ→Hau")]
        [InlineData(15, "ᾊὑ→Hau")]
        [InlineData(16, "Αὕ→Hau")]
        [InlineData(17, "Άὕ→Hau")]
        [InlineData(18, "Άὕ→Hau")]
        [InlineData(19, "Ὰὕ→Hau")]
        [InlineData(20, "Ᾰὕ→Hau")]
        [InlineData(21, "Ᾱὕ→Hau")]
        [InlineData(22, "Ἀὕ→Hau")]
        [InlineData(23, "Ἄὕ→Hau")]
        [InlineData(24, "Ἂὕ→Hau")]
        [InlineData(25, "ᾎὕ→Hau")]
        [InlineData(26, "ᾼὕ→Hau")]
        [InlineData(27, "Ἆὕ→Hau")]
        [InlineData(28, "ᾈὕ→Hau")]
        [InlineData(29, "ᾌὕ→Hau")]
        [InlineData(30, "ᾊὕ→Hau")]
        [InlineData(31, "Αὓ→Hau")]
        [InlineData(32, "Άὓ→Hau")]
        [InlineData(33, "Άὓ→Hau")]
        [InlineData(34, "Ὰὓ→Hau")]
        [InlineData(35, "Ᾰὓ→Hau")]
        [InlineData(36, "Ᾱὓ→Hau")]
        [InlineData(37, "Ἀὓ→Hau")]
        [InlineData(38, "Ἄὓ→Hau")]
        [InlineData(39, "Ἂὓ→Hau")]
        [InlineData(40, "ᾎὓ→Hau")]
        [InlineData(41, "ᾼὓ→Hau")]
        [InlineData(42, "Ἆὓ→Hau")]
        [InlineData(43, "ᾈὓ→Hau")]
        [InlineData(44, "ᾌὓ→Hau")]
        [InlineData(45, "ᾊὓ→Hau")]
        [InlineData(46, "Αὗ→Hau")]
        [InlineData(47, "Άὗ→Hau")]
        [InlineData(48, "Άὗ→Hau")]
        [InlineData(49, "Ὰὗ→Hau")]
        [InlineData(50, "Ᾰὗ→Hau")]
        [InlineData(51, "Ᾱὗ→Hau")]
        [InlineData(52, "Ἀὗ→Hau")]
        [InlineData(53, "Ἄὗ→Hau")]
        [InlineData(54, "Ἂὗ→Hau")]
        [InlineData(55, "ᾎὗ→Hau")]
        [InlineData(56, "ᾼὗ→Hau")]
        [InlineData(57, "Ἆὗ→Hau")]
        [InlineData(58, "ᾈὗ→Hau")]
        [InlineData(59, "ᾌὗ→Hau")]
        [InlineData(60, "ᾊὗ→Hau")]
        // 共 61 个        
        public void test_Hau(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        //集合（upper_alpha_without_dasia）+ 集合（lower_upsilon_without_dasia）→Au；
        // 集合（upper_alpha_without_dasia）+ 集合（lower_upsilon_without_dasia）→Au
        [InlineData(1, "Αυ→Au")]
        [InlineData(2, "Άυ→Au")]
        [InlineData(3, "Άυ→Au")]
        [InlineData(4, "Ὰυ→Au")]
        [InlineData(5, "Ᾰυ→Au")]
        [InlineData(6, "Ᾱυ→Au")]
        [InlineData(7, "Ἀυ→Au")]
        [InlineData(8, "Ἄυ→Au")]
        [InlineData(9, "Ἂυ→Au")]
        [InlineData(10, "ᾎυ→Au")]
        [InlineData(11, "ᾼυ→Au")]
        [InlineData(12, "Ἆυ→Au")]
        [InlineData(13, "ᾈυ→Au")]
        [InlineData(14, "ᾌυ→Au")]
        [InlineData(15, "ᾊυ→Au")]
        [InlineData(16, "Αύ→Au")]
        [InlineData(17, "Άύ→Au")]
        [InlineData(18, "Άύ→Au")]
        [InlineData(19, "Ὰύ→Au")]
        [InlineData(20, "Ᾰύ→Au")]
        [InlineData(21, "Ᾱύ→Au")]
        [InlineData(22, "Ἀύ→Au")]
        [InlineData(23, "Ἄύ→Au")]
        [InlineData(24, "Ἂύ→Au")]
        [InlineData(25, "ᾎύ→Au")]
        [InlineData(26, "ᾼύ→Au")]
        [InlineData(27, "Ἆύ→Au")]
        [InlineData(28, "ᾈύ→Au")]
        [InlineData(29, "ᾌύ→Au")]
        [InlineData(30, "ᾊύ→Au")]
        [InlineData(31, "Αύ→Au")]
        [InlineData(32, "Άύ→Au")]
        [InlineData(33, "Άύ→Au")]
        [InlineData(34, "Ὰύ→Au")]
        [InlineData(35, "Ᾰύ→Au")]
        [InlineData(36, "Ᾱύ→Au")]
        [InlineData(37, "Ἀύ→Au")]
        [InlineData(38, "Ἄύ→Au")]
        [InlineData(39, "Ἂύ→Au")]
        [InlineData(40, "ᾎύ→Au")]
        [InlineData(41, "ᾼύ→Au")]
        [InlineData(42, "Ἆύ→Au")]
        [InlineData(43, "ᾈύ→Au")]
        [InlineData(44, "ᾌύ→Au")]
        [InlineData(45, "ᾊύ→Au")]
        [InlineData(46, "Αὺ→Au")]
        [InlineData(47, "Άὺ→Au")]
        [InlineData(48, "Άὺ→Au")]
        [InlineData(49, "Ὰὺ→Au")]
        [InlineData(50, "Ᾰὺ→Au")]
        [InlineData(51, "Ᾱὺ→Au")]
        [InlineData(52, "Ἀὺ→Au")]
        [InlineData(53, "Ἄὺ→Au")]
        [InlineData(54, "Ἂὺ→Au")]
        [InlineData(55, "ᾎὺ→Au")]
        [InlineData(56, "ᾼὺ→Au")]
        [InlineData(57, "Ἆὺ→Au")]
        [InlineData(58, "ᾈὺ→Au")]
        [InlineData(59, "ᾌὺ→Au")]
        [InlineData(60, "ᾊὺ→Au")]
        [InlineData(61, "Αϋ→Au")]
        [InlineData(62, "Άϋ→Au")]
        [InlineData(63, "Άϋ→Au")]
        [InlineData(64, "Ὰϋ→Au")]
        [InlineData(65, "Ᾰϋ→Au")]
        [InlineData(66, "Ᾱϋ→Au")]
        [InlineData(67, "Ἀϋ→Au")]
        [InlineData(68, "Ἄϋ→Au")]
        [InlineData(69, "Ἂϋ→Au")]
        [InlineData(70, "ᾎϋ→Au")]
        [InlineData(71, "ᾼϋ→Au")]
        [InlineData(72, "Ἆϋ→Au")]
        [InlineData(73, "ᾈϋ→Au")]
        [InlineData(74, "ᾌϋ→Au")]
        [InlineData(75, "ᾊϋ→Au")]
        [InlineData(76, "Αῠ→Au")]
        [InlineData(77, "Άῠ→Au")]
        [InlineData(78, "Άῠ→Au")]
        [InlineData(79, "Ὰῠ→Au")]
        [InlineData(80, "Ᾰῠ→Au")]
        [InlineData(81, "Ᾱῠ→Au")]
        [InlineData(82, "Ἀῠ→Au")]
        [InlineData(83, "Ἄῠ→Au")]
        [InlineData(84, "Ἂῠ→Au")]
        [InlineData(85, "ᾎῠ→Au")]
        [InlineData(86, "ᾼῠ→Au")]
        [InlineData(87, "Ἆῠ→Au")]
        [InlineData(88, "ᾈῠ→Au")]
        [InlineData(89, "ᾌῠ→Au")]
        [InlineData(90, "ᾊῠ→Au")]
        [InlineData(91, "Αῡ→Au")]
        [InlineData(92, "Άῡ→Au")]
        [InlineData(93, "Άῡ→Au")]
        [InlineData(94, "Ὰῡ→Au")]
        [InlineData(95, "Ᾰῡ→Au")]
        [InlineData(96, "Ᾱῡ→Au")]
        [InlineData(97, "Ἀῡ→Au")]
        [InlineData(98, "Ἄῡ→Au")]
        [InlineData(99, "Ἂῡ→Au")]
        [InlineData(100, "ᾎῡ→Au")]
        [InlineData(101, "ᾼῡ→Au")]
        [InlineData(102, "Ἆῡ→Au")]
        [InlineData(103, "ᾈῡ→Au")]
        [InlineData(104, "ᾌῡ→Au")]
        [InlineData(105, "ᾊῡ→Au")]
        [InlineData(106, "Αΰ→Au")]
        [InlineData(107, "Άΰ→Au")]
        [InlineData(108, "Άΰ→Au")]
        [InlineData(109, "Ὰΰ→Au")]
        [InlineData(110, "Ᾰΰ→Au")]
        [InlineData(111, "Ᾱΰ→Au")]
        [InlineData(112, "Ἀΰ→Au")]
        [InlineData(113, "Ἄΰ→Au")]
        [InlineData(114, "Ἂΰ→Au")]
        [InlineData(115, "ᾎΰ→Au")]
        [InlineData(116, "ᾼΰ→Au")]
        [InlineData(117, "Ἆΰ→Au")]
        [InlineData(118, "ᾈΰ→Au")]
        [InlineData(119, "ᾌΰ→Au")]
        [InlineData(120, "ᾊΰ→Au")]
        [InlineData(121, "Αΰ→Au")]
        [InlineData(122, "Άΰ→Au")]
        [InlineData(123, "Άΰ→Au")]
        [InlineData(124, "Ὰΰ→Au")]
        [InlineData(125, "Ᾰΰ→Au")]
        [InlineData(126, "Ᾱΰ→Au")]
        [InlineData(127, "Ἀΰ→Au")]
        [InlineData(128, "Ἄΰ→Au")]
        [InlineData(129, "Ἂΰ→Au")]
        [InlineData(130, "ᾎΰ→Au")]
        [InlineData(131, "ᾼΰ→Au")]
        [InlineData(132, "Ἆΰ→Au")]
        [InlineData(133, "ᾈΰ→Au")]
        [InlineData(134, "ᾌΰ→Au")]
        [InlineData(135, "ᾊΰ→Au")]
        [InlineData(136, "Αῢ→Au")]
        [InlineData(137, "Άῢ→Au")]
        [InlineData(138, "Άῢ→Au")]
        [InlineData(139, "Ὰῢ→Au")]
        [InlineData(140, "Ᾰῢ→Au")]
        [InlineData(141, "Ᾱῢ→Au")]
        [InlineData(142, "Ἀῢ→Au")]
        [InlineData(143, "Ἄῢ→Au")]
        [InlineData(144, "Ἂῢ→Au")]
        [InlineData(145, "ᾎῢ→Au")]
        [InlineData(146, "ᾼῢ→Au")]
        [InlineData(147, "Ἆῢ→Au")]
        [InlineData(148, "ᾈῢ→Au")]
        [InlineData(149, "ᾌῢ→Au")]
        [InlineData(150, "ᾊῢ→Au")]
        [InlineData(151, "Αὐ→Au")]
        [InlineData(152, "Άὐ→Au")]
        [InlineData(153, "Άὐ→Au")]
        [InlineData(154, "Ὰὐ→Au")]
        [InlineData(155, "Ᾰὐ→Au")]
        [InlineData(156, "Ᾱὐ→Au")]
        [InlineData(157, "Ἀὐ→Au")]
        [InlineData(158, "Ἄὐ→Au")]
        [InlineData(159, "Ἂὐ→Au")]
        [InlineData(160, "ᾎὐ→Au")]
        [InlineData(161, "ᾼὐ→Au")]
        [InlineData(162, "Ἆὐ→Au")]
        [InlineData(163, "ᾈὐ→Au")]
        [InlineData(164, "ᾌὐ→Au")]
        [InlineData(165, "ᾊὐ→Au")]
        [InlineData(166, "Αὔ→Au")]
        [InlineData(167, "Άὔ→Au")]
        [InlineData(168, "Άὔ→Au")]
        [InlineData(169, "Ὰὔ→Au")]
        [InlineData(170, "Ᾰὔ→Au")]
        [InlineData(171, "Ᾱὔ→Au")]
        [InlineData(172, "Ἀὔ→Au")]
        [InlineData(173, "Ἄὔ→Au")]
        [InlineData(174, "Ἂὔ→Au")]
        [InlineData(175, "ᾎὔ→Au")]
        [InlineData(176, "ᾼὔ→Au")]
        [InlineData(177, "Ἆὔ→Au")]
        [InlineData(178, "ᾈὔ→Au")]
        [InlineData(179, "ᾌὔ→Au")]
        [InlineData(180, "ᾊὔ→Au")]
        [InlineData(181, "Αὒ→Au")]
        [InlineData(182, "Άὒ→Au")]
        [InlineData(183, "Άὒ→Au")]
        [InlineData(184, "Ὰὒ→Au")]
        [InlineData(185, "Ᾰὒ→Au")]
        [InlineData(186, "Ᾱὒ→Au")]
        [InlineData(187, "Ἀὒ→Au")]
        [InlineData(188, "Ἄὒ→Au")]
        [InlineData(189, "Ἂὒ→Au")]
        [InlineData(190, "ᾎὒ→Au")]
        [InlineData(191, "ᾼὒ→Au")]
        [InlineData(192, "Ἆὒ→Au")]
        [InlineData(193, "ᾈὒ→Au")]
        [InlineData(194, "ᾌὒ→Au")]
        [InlineData(195, "ᾊὒ→Au")]
        [InlineData(196, "Αῦ→Au")]
        [InlineData(197, "Άῦ→Au")]
        [InlineData(198, "Άῦ→Au")]
        [InlineData(199, "Ὰῦ→Au")]
        [InlineData(200, "Ᾰῦ→Au")]
        [InlineData(201, "Ᾱῦ→Au")]
        [InlineData(202, "Ἀῦ→Au")]
        [InlineData(203, "Ἄῦ→Au")]
        [InlineData(204, "Ἂῦ→Au")]
        [InlineData(205, "ᾎῦ→Au")]
        [InlineData(206, "ᾼῦ→Au")]
        [InlineData(207, "Ἆῦ→Au")]
        [InlineData(208, "ᾈῦ→Au")]
        [InlineData(209, "ᾌῦ→Au")]
        [InlineData(210, "ᾊῦ→Au")]
        [InlineData(211, "Αῧ→Au")]
        [InlineData(212, "Άῧ→Au")]
        [InlineData(213, "Άῧ→Au")]
        [InlineData(214, "Ὰῧ→Au")]
        [InlineData(215, "Ᾰῧ→Au")]
        [InlineData(216, "Ᾱῧ→Au")]
        [InlineData(217, "Ἀῧ→Au")]
        [InlineData(218, "Ἄῧ→Au")]
        [InlineData(219, "Ἂῧ→Au")]
        [InlineData(220, "ᾎῧ→Au")]
        [InlineData(221, "ᾼῧ→Au")]
        [InlineData(222, "Ἆῧ→Au")]
        [InlineData(223, "ᾈῧ→Au")]
        [InlineData(224, "ᾌῧ→Au")]
        [InlineData(225, "ᾊῧ→Au")]
        [InlineData(226, "Αὖ→Au")]
        [InlineData(227, "Άὖ→Au")]
        [InlineData(228, "Άὖ→Au")]
        [InlineData(229, "Ὰὖ→Au")]
        [InlineData(230, "Ᾰὖ→Au")]
        [InlineData(231, "Ᾱὖ→Au")]
        [InlineData(232, "Ἀὖ→Au")]
        [InlineData(233, "Ἄὖ→Au")]
        [InlineData(234, "Ἂὖ→Au")]
        [InlineData(235, "ᾎὖ→Au")]
        [InlineData(236, "ᾼὖ→Au")]
        [InlineData(237, "Ἆὖ→Au")]
        [InlineData(238, "ᾈὖ→Au")]
        [InlineData(239, "ᾌὖ→Au")]
        [InlineData(240, "ᾊὖ→Au")]
        // 共 241 个
        public void test_Au(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        //集合（lower_alpha_without_dasia）+ 集合（lower_upsilon_with_dasia）→hau；
        // 集合（lower_alpha_without_dasia）+ 集合（lower_upsilon_with_dasia）→hau
        [InlineData(1, "αὑ→hau")]
        [InlineData(2, "άὑ→hau")]
        [InlineData(3, "άὑ→hau")]
        [InlineData(4, "ὰὑ→hau")]
        [InlineData(5, "ᾰὑ→hau")]
        [InlineData(6, "ᾱὑ→hau")]
        [InlineData(7, "ᾷὑ→hau")]
        [InlineData(8, "ἀὑ→hau")]
        [InlineData(9, "ἄὑ→hau")]
        [InlineData(10, "ἂὑ→hau")]
        [InlineData(11, "ᾆὑ→hau")]
        [InlineData(12, "ᾶὑ→hau")]
        [InlineData(13, "ᾳὑ→hau")]
        [InlineData(14, "ᾴὑ→hau")]
        [InlineData(15, "ᾲὑ→hau")]
        [InlineData(16, "ἆὑ→hau")]
        [InlineData(17, "ᾀὑ→hau")]
        [InlineData(18, "ᾄὑ→hau")]
        [InlineData(19, "ᾂὑ→hau")]
        [InlineData(20, "αὕ→hau")]
        [InlineData(21, "άὕ→hau")]
        [InlineData(22, "άὕ→hau")]
        [InlineData(23, "ὰὕ→hau")]
        [InlineData(24, "ᾰὕ→hau")]
        [InlineData(25, "ᾱὕ→hau")]
        [InlineData(26, "ᾷὕ→hau")]
        [InlineData(27, "ἀὕ→hau")]
        [InlineData(28, "ἄὕ→hau")]
        [InlineData(29, "ἂὕ→hau")]
        [InlineData(30, "ᾆὕ→hau")]
        [InlineData(31, "ᾶὕ→hau")]
        [InlineData(32, "ᾳὕ→hau")]
        [InlineData(33, "ᾴὕ→hau")]
        [InlineData(34, "ᾲὕ→hau")]
        [InlineData(35, "ἆὕ→hau")]
        [InlineData(36, "ᾀὕ→hau")]
        [InlineData(37, "ᾄὕ→hau")]
        [InlineData(38, "ᾂὕ→hau")]
        [InlineData(39, "αὓ→hau")]
        [InlineData(40, "άὓ→hau")]
        [InlineData(41, "άὓ→hau")]
        [InlineData(42, "ὰὓ→hau")]
        [InlineData(43, "ᾰὓ→hau")]
        [InlineData(44, "ᾱὓ→hau")]
        [InlineData(45, "ᾷὓ→hau")]
        [InlineData(46, "ἀὓ→hau")]
        [InlineData(47, "ἄὓ→hau")]
        [InlineData(48, "ἂὓ→hau")]
        [InlineData(49, "ᾆὓ→hau")]
        [InlineData(50, "ᾶὓ→hau")]
        [InlineData(51, "ᾳὓ→hau")]
        [InlineData(52, "ᾴὓ→hau")]
        [InlineData(53, "ᾲὓ→hau")]
        [InlineData(54, "ἆὓ→hau")]
        [InlineData(55, "ᾀὓ→hau")]
        [InlineData(56, "ᾄὓ→hau")]
        [InlineData(57, "ᾂὓ→hau")]
        [InlineData(58, "αὗ→hau")]
        [InlineData(59, "άὗ→hau")]
        [InlineData(60, "άὗ→hau")]
        [InlineData(61, "ὰὗ→hau")]
        [InlineData(62, "ᾰὗ→hau")]
        [InlineData(63, "ᾱὗ→hau")]
        [InlineData(64, "ᾷὗ→hau")]
        [InlineData(65, "ἀὗ→hau")]
        [InlineData(66, "ἄὗ→hau")]
        [InlineData(67, "ἂὗ→hau")]
        [InlineData(68, "ᾆὗ→hau")]
        [InlineData(69, "ᾶὗ→hau")]
        [InlineData(70, "ᾳὗ→hau")]
        [InlineData(71, "ᾴὗ→hau")]
        [InlineData(72, "ᾲὗ→hau")]
        [InlineData(73, "ἆὗ→hau")]
        [InlineData(74, "ᾀὗ→hau")]
        [InlineData(75, "ᾄὗ→hau")]
        [InlineData(76, "ᾂὗ→hau")]
        // 共 77 个
        public void test_hau(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        //集合（lower_alpha_without_dasia）+ 集合（lower_upsilon_without_dasia）→au。
        // 集合（lower_alpha_without_dasia）+ 集合（lower_upsilon_without_dasia）→au
        [InlineData(1, "αυ→au")]
        [InlineData(2, "άυ→au")]
        [InlineData(3, "άυ→au")]
        [InlineData(4, "ὰυ→au")]
        [InlineData(5, "ᾰυ→au")]
        [InlineData(6, "ᾱυ→au")]
        [InlineData(7, "ᾷυ→au")]
        [InlineData(8, "ἀυ→au")]
        [InlineData(9, "ἄυ→au")]
        [InlineData(10, "ἂυ→au")]
        [InlineData(11, "ᾆυ→au")]
        [InlineData(12, "ᾶυ→au")]
        [InlineData(13, "ᾳυ→au")]
        [InlineData(14, "ᾴυ→au")]
        [InlineData(15, "ᾲυ→au")]
        [InlineData(16, "ἆυ→au")]
        [InlineData(17, "ᾀυ→au")]
        [InlineData(18, "ᾄυ→au")]
        [InlineData(19, "ᾂυ→au")]
        [InlineData(20, "αύ→au")]
        [InlineData(21, "άύ→au")]
        [InlineData(22, "άύ→au")]
        [InlineData(23, "ὰύ→au")]
        [InlineData(24, "ᾰύ→au")]
        [InlineData(25, "ᾱύ→au")]
        [InlineData(26, "ᾷύ→au")]
        [InlineData(27, "ἀύ→au")]
        [InlineData(28, "ἄύ→au")]
        [InlineData(29, "ἂύ→au")]
        [InlineData(30, "ᾆύ→au")]
        [InlineData(31, "ᾶύ→au")]
        [InlineData(32, "ᾳύ→au")]
        [InlineData(33, "ᾴύ→au")]
        [InlineData(34, "ᾲύ→au")]
        [InlineData(35, "ἆύ→au")]
        [InlineData(36, "ᾀύ→au")]
        [InlineData(37, "ᾄύ→au")]
        [InlineData(38, "ᾂύ→au")]
        [InlineData(39, "αύ→au")]
        [InlineData(40, "άύ→au")]
        [InlineData(41, "άύ→au")]
        [InlineData(42, "ὰύ→au")]
        [InlineData(43, "ᾰύ→au")]
        [InlineData(44, "ᾱύ→au")]
        [InlineData(45, "ᾷύ→au")]
        [InlineData(46, "ἀύ→au")]
        [InlineData(47, "ἄύ→au")]
        [InlineData(48, "ἂύ→au")]
        [InlineData(49, "ᾆύ→au")]
        [InlineData(50, "ᾶύ→au")]
        [InlineData(51, "ᾳύ→au")]
        [InlineData(52, "ᾴύ→au")]
        [InlineData(53, "ᾲύ→au")]
        [InlineData(54, "ἆύ→au")]
        [InlineData(55, "ᾀύ→au")]
        [InlineData(56, "ᾄύ→au")]
        [InlineData(57, "ᾂύ→au")]
        [InlineData(58, "αὺ→au")]
        [InlineData(59, "άὺ→au")]
        [InlineData(60, "άὺ→au")]
        [InlineData(61, "ὰὺ→au")]
        [InlineData(62, "ᾰὺ→au")]
        [InlineData(63, "ᾱὺ→au")]
        [InlineData(64, "ᾷὺ→au")]
        [InlineData(65, "ἀὺ→au")]
        [InlineData(66, "ἄὺ→au")]
        [InlineData(67, "ἂὺ→au")]
        [InlineData(68, "ᾆὺ→au")]
        [InlineData(69, "ᾶὺ→au")]
        [InlineData(70, "ᾳὺ→au")]
        [InlineData(71, "ᾴὺ→au")]
        [InlineData(72, "ᾲὺ→au")]
        [InlineData(73, "ἆὺ→au")]
        [InlineData(74, "ᾀὺ→au")]
        [InlineData(75, "ᾄὺ→au")]
        [InlineData(76, "ᾂὺ→au")]
        [InlineData(77, "αϋ→au")]
        [InlineData(78, "άϋ→au")]
        [InlineData(79, "άϋ→au")]
        [InlineData(80, "ὰϋ→au")]
        [InlineData(81, "ᾰϋ→au")]
        [InlineData(82, "ᾱϋ→au")]
        [InlineData(83, "ᾷϋ→au")]
        [InlineData(84, "ἀϋ→au")]
        [InlineData(85, "ἄϋ→au")]
        [InlineData(86, "ἂϋ→au")]
        [InlineData(87, "ᾆϋ→au")]
        [InlineData(88, "ᾶϋ→au")]
        [InlineData(89, "ᾳϋ→au")]
        [InlineData(90, "ᾴϋ→au")]
        [InlineData(91, "ᾲϋ→au")]
        [InlineData(92, "ἆϋ→au")]
        [InlineData(93, "ᾀϋ→au")]
        [InlineData(94, "ᾄϋ→au")]
        [InlineData(95, "ᾂϋ→au")]
        [InlineData(96, "αῠ→au")]
        [InlineData(97, "άῠ→au")]
        [InlineData(98, "άῠ→au")]
        [InlineData(99, "ὰῠ→au")]
        [InlineData(100, "ᾰῠ→au")]
        [InlineData(101, "ᾱῠ→au")]
        [InlineData(102, "ᾷῠ→au")]
        [InlineData(103, "ἀῠ→au")]
        [InlineData(104, "ἄῠ→au")]
        [InlineData(105, "ἂῠ→au")]
        [InlineData(106, "ᾆῠ→au")]
        [InlineData(107, "ᾶῠ→au")]
        [InlineData(108, "ᾳῠ→au")]
        [InlineData(109, "ᾴῠ→au")]
        [InlineData(110, "ᾲῠ→au")]
        [InlineData(111, "ἆῠ→au")]
        [InlineData(112, "ᾀῠ→au")]
        [InlineData(113, "ᾄῠ→au")]
        [InlineData(114, "ᾂῠ→au")]
        [InlineData(115, "αῡ→au")]
        [InlineData(116, "άῡ→au")]
        [InlineData(117, "άῡ→au")]
        [InlineData(118, "ὰῡ→au")]
        [InlineData(119, "ᾰῡ→au")]
        [InlineData(120, "ᾱῡ→au")]
        [InlineData(121, "ᾷῡ→au")]
        [InlineData(122, "ἀῡ→au")]
        [InlineData(123, "ἄῡ→au")]
        [InlineData(124, "ἂῡ→au")]
        [InlineData(125, "ᾆῡ→au")]
        [InlineData(126, "ᾶῡ→au")]
        [InlineData(127, "ᾳῡ→au")]
        [InlineData(128, "ᾴῡ→au")]
        [InlineData(129, "ᾲῡ→au")]
        [InlineData(130, "ἆῡ→au")]
        [InlineData(131, "ᾀῡ→au")]
        [InlineData(132, "ᾄῡ→au")]
        [InlineData(133, "ᾂῡ→au")]
        [InlineData(134, "αΰ→au")]
        [InlineData(135, "άΰ→au")]
        [InlineData(136, "άΰ→au")]
        [InlineData(137, "ὰΰ→au")]
        [InlineData(138, "ᾰΰ→au")]
        [InlineData(139, "ᾱΰ→au")]
        [InlineData(140, "ᾷΰ→au")]
        [InlineData(141, "ἀΰ→au")]
        [InlineData(142, "ἄΰ→au")]
        [InlineData(143, "ἂΰ→au")]
        [InlineData(144, "ᾆΰ→au")]
        [InlineData(145, "ᾶΰ→au")]
        [InlineData(146, "ᾳΰ→au")]
        [InlineData(147, "ᾴΰ→au")]
        [InlineData(148, "ᾲΰ→au")]
        [InlineData(149, "ἆΰ→au")]
        [InlineData(150, "ᾀΰ→au")]
        [InlineData(151, "ᾄΰ→au")]
        [InlineData(152, "ᾂΰ→au")]
        [InlineData(153, "αΰ→au")]
        [InlineData(154, "άΰ→au")]
        [InlineData(155, "άΰ→au")]
        [InlineData(156, "ὰΰ→au")]
        [InlineData(157, "ᾰΰ→au")]
        [InlineData(158, "ᾱΰ→au")]
        [InlineData(159, "ᾷΰ→au")]
        [InlineData(160, "ἀΰ→au")]
        [InlineData(161, "ἄΰ→au")]
        [InlineData(162, "ἂΰ→au")]
        [InlineData(163, "ᾆΰ→au")]
        [InlineData(164, "ᾶΰ→au")]
        [InlineData(165, "ᾳΰ→au")]
        [InlineData(166, "ᾴΰ→au")]
        [InlineData(167, "ᾲΰ→au")]
        [InlineData(168, "ἆΰ→au")]
        [InlineData(169, "ᾀΰ→au")]
        [InlineData(170, "ᾄΰ→au")]
        [InlineData(171, "ᾂΰ→au")]
        [InlineData(172, "αῢ→au")]
        [InlineData(173, "άῢ→au")]
        [InlineData(174, "άῢ→au")]
        [InlineData(175, "ὰῢ→au")]
        [InlineData(176, "ᾰῢ→au")]
        [InlineData(177, "ᾱῢ→au")]
        [InlineData(178, "ᾷῢ→au")]
        [InlineData(179, "ἀῢ→au")]
        [InlineData(180, "ἄῢ→au")]
        [InlineData(181, "ἂῢ→au")]
        [InlineData(182, "ᾆῢ→au")]
        [InlineData(183, "ᾶῢ→au")]
        [InlineData(184, "ᾳῢ→au")]
        [InlineData(185, "ᾴῢ→au")]
        [InlineData(186, "ᾲῢ→au")]
        [InlineData(187, "ἆῢ→au")]
        [InlineData(188, "ᾀῢ→au")]
        [InlineData(189, "ᾄῢ→au")]
        [InlineData(190, "ᾂῢ→au")]
        [InlineData(191, "αὐ→au")]
        [InlineData(192, "άὐ→au")]
        [InlineData(193, "άὐ→au")]
        [InlineData(194, "ὰὐ→au")]
        [InlineData(195, "ᾰὐ→au")]
        [InlineData(196, "ᾱὐ→au")]
        [InlineData(197, "ᾷὐ→au")]
        [InlineData(198, "ἀὐ→au")]
        [InlineData(199, "ἄὐ→au")]
        [InlineData(200, "ἂὐ→au")]
        [InlineData(201, "ᾆὐ→au")]
        [InlineData(202, "ᾶὐ→au")]
        [InlineData(203, "ᾳὐ→au")]
        [InlineData(204, "ᾴὐ→au")]
        [InlineData(205, "ᾲὐ→au")]
        [InlineData(206, "ἆὐ→au")]
        [InlineData(207, "ᾀὐ→au")]
        [InlineData(208, "ᾄὐ→au")]
        [InlineData(209, "ᾂὐ→au")]
        [InlineData(210, "αὔ→au")]
        [InlineData(211, "άὔ→au")]
        [InlineData(212, "άὔ→au")]
        [InlineData(213, "ὰὔ→au")]
        [InlineData(214, "ᾰὔ→au")]
        [InlineData(215, "ᾱὔ→au")]
        [InlineData(216, "ᾷὔ→au")]
        [InlineData(217, "ἀὔ→au")]
        [InlineData(218, "ἄὔ→au")]
        [InlineData(219, "ἂὔ→au")]
        [InlineData(220, "ᾆὔ→au")]
        [InlineData(221, "ᾶὔ→au")]
        [InlineData(222, "ᾳὔ→au")]
        [InlineData(223, "ᾴὔ→au")]
        [InlineData(224, "ᾲὔ→au")]
        [InlineData(225, "ἆὔ→au")]
        [InlineData(226, "ᾀὔ→au")]
        [InlineData(227, "ᾄὔ→au")]
        [InlineData(228, "ᾂὔ→au")]
        [InlineData(229, "αὒ→au")]
        [InlineData(230, "άὒ→au")]
        [InlineData(231, "άὒ→au")]
        [InlineData(232, "ὰὒ→au")]
        [InlineData(233, "ᾰὒ→au")]
        [InlineData(234, "ᾱὒ→au")]
        [InlineData(235, "ᾷὒ→au")]
        [InlineData(236, "ἀὒ→au")]
        [InlineData(237, "ἄὒ→au")]
        [InlineData(238, "ἂὒ→au")]
        [InlineData(239, "ᾆὒ→au")]
        [InlineData(240, "ᾶὒ→au")]
        [InlineData(241, "ᾳὒ→au")]
        [InlineData(242, "ᾴὒ→au")]
        [InlineData(243, "ᾲὒ→au")]
        [InlineData(244, "ἆὒ→au")]
        [InlineData(245, "ᾀὒ→au")]
        [InlineData(246, "ᾄὒ→au")]
        [InlineData(247, "ᾂὒ→au")]
        [InlineData(248, "αῦ→au")]
        [InlineData(249, "άῦ→au")]
        [InlineData(250, "άῦ→au")]
        [InlineData(251, "ὰῦ→au")]
        [InlineData(252, "ᾰῦ→au")]
        [InlineData(253, "ᾱῦ→au")]
        [InlineData(254, "ᾷῦ→au")]
        [InlineData(255, "ἀῦ→au")]
        [InlineData(256, "ἄῦ→au")]
        [InlineData(257, "ἂῦ→au")]
        [InlineData(258, "ᾆῦ→au")]
        [InlineData(259, "ᾶῦ→au")]
        [InlineData(260, "ᾳῦ→au")]
        [InlineData(261, "ᾴῦ→au")]
        [InlineData(262, "ᾲῦ→au")]
        [InlineData(263, "ἆῦ→au")]
        [InlineData(264, "ᾀῦ→au")]
        [InlineData(265, "ᾄῦ→au")]
        [InlineData(266, "ᾂῦ→au")]
        [InlineData(267, "αῧ→au")]
        [InlineData(268, "άῧ→au")]
        [InlineData(269, "άῧ→au")]
        [InlineData(270, "ὰῧ→au")]
        [InlineData(271, "ᾰῧ→au")]
        [InlineData(272, "ᾱῧ→au")]
        [InlineData(273, "ᾷῧ→au")]
        [InlineData(274, "ἀῧ→au")]
        [InlineData(275, "ἄῧ→au")]
        [InlineData(276, "ἂῧ→au")]
        [InlineData(277, "ᾆῧ→au")]
        [InlineData(278, "ᾶῧ→au")]
        [InlineData(279, "ᾳῧ→au")]
        [InlineData(280, "ᾴῧ→au")]
        [InlineData(281, "ᾲῧ→au")]
        [InlineData(282, "ἆῧ→au")]
        [InlineData(283, "ᾀῧ→au")]
        [InlineData(284, "ᾄῧ→au")]
        [InlineData(285, "ᾂῧ→au")]
        [InlineData(286, "αὖ→au")]
        [InlineData(287, "άὖ→au")]
        [InlineData(288, "άὖ→au")]
        [InlineData(289, "ὰὖ→au")]
        [InlineData(290, "ᾰὖ→au")]
        [InlineData(291, "ᾱὖ→au")]
        [InlineData(292, "ᾷὖ→au")]
        [InlineData(293, "ἀὖ→au")]
        [InlineData(294, "ἄὖ→au")]
        [InlineData(295, "ἂὖ→au")]
        [InlineData(296, "ᾆὖ→au")]
        [InlineData(297, "ᾶὖ→au")]
        [InlineData(298, "ᾳὖ→au")]
        [InlineData(299, "ᾴὖ→au")]
        [InlineData(300, "ᾲὖ→au")]
        [InlineData(301, "ἆὖ→au")]
        [InlineData(302, "ᾀὖ→au")]
        [InlineData(303, "ᾄὖ→au")]
        [InlineData(304, "ᾂὖ→au")]
        // 共 305 个
        public void test_au(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        #endregion


        // https://github.com/tsing26/Greektrans/issues/13
        [Theory]
        [InlineData(1, "ἅβα*→haba")]
        [InlineData(2, "ἁβρός*→habros")]
        [InlineData(3, "ἌΓΑΜΑΙ*→AGAMAI")]
        [InlineData(4, "ἁγῑνέω*→hagineō")]
        [InlineData(5, "ἁγώ*→hagō")]
        [InlineData(6, "ᾅδaς*→hadas")]
        [InlineData(7, "ἃδοι*→hadoi")]
        [InlineData(8, "ἃζομαι*→hazomai")]
        [InlineData(9, "ἃζω*→hazō")]
        [InlineData(10, "ἈΘΎΡΩ*→ATHYRŌ")]
        [InlineData(11, "Ἄθῳος*→Athōos")]
        [InlineData(12, "αἱμακτός*→haimaktos")]
        [InlineData(13, "Ἄγγλος→Anglos")]
        [InlineData(14, "ἅγια→hagia")]
        [InlineData(15, "ἁγιογδύτης→hagiogdytēs")]
        [InlineData(16, "ἃγιος→hagios")]
        [InlineData(17, "ἅη→haē")]
        [InlineData(18, "ἀϊβασιλιάτικος→aivasiliatikos")]
        [InlineData(19, "αἰγίς→aigis")]
        [InlineData(20, "αἱματώνω→haimatōnō")]
        [InlineData(21, "αίρετός→airetos")]
        [InlineData(22, "ἀϊτός→aitos")]
        [InlineData(23, "ἁλιεία→halieia")]
        [InlineData(24, "ἁμαξωτός→hamaxōtos")]
        // 共 24 个
        public void test_issue_13_alpha(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "βᾰβαί*→babai")]
        [InlineData(2, "ΒΆΖΩ*→BAZŌ")]
        [InlineData(3, "βάϊν*→bain")]
        [InlineData(4, "βαλλαντιοτομέω*→ballantiotomeō")]
        [InlineData(5, "ΒᾸΡΎΣ*→BARYS")]
        [InlineData(6, "βᾰσᾰνιστέος*→basanisteos")]
        [InlineData(7, "ΒΑΥΚΌΣ*→BAUKOS")]
        [InlineData(8, "ΒΔΈΩ*→BDEŌ")]
        [InlineData(9, "ΒΈΜΒΙΞ*→BEMBIX")]
        [InlineData(10, "βησσήεις*→bēssēeis")]
        [InlineData(11, "βιάζω*→biazō")]
        [InlineData(12, "βίβλος*→biblos")]
        [InlineData(13, "ΒΊΟΣ*→BIOS")]
        [InlineData(14, "βιόω*→bioō")]
        [InlineData(15, "βαγένι→vageni")]
        [InlineData(16, "βάγια→vagia")]
        [InlineData(17, "βαγόνι→vagoni")]
        [InlineData(18, "βάδισμα→vadisma")]
        [InlineData(19, "βαθαίνω→vathainō")]
        [InlineData(20, "βαθμηδόν→vathmēdon")]
        [InlineData(21, "βαθμιαῖς→vathmiais")]
        [InlineData(22, "βαθμολογία→vathmologia")]
        [InlineData(23, "βαθμός→vathmos")]
        [InlineData(24, "βαθμοῦχος→vathmouchos")]
        [InlineData(25, "βαθυ→vathu")]
        // 共 25 个
        public void test_issue_13_beta(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "Γάδειρα*→Gadeira")]
        [InlineData(2, "γάζα*→gaza")]
        [InlineData(3, "γάϊος*→gaios")]
        [InlineData(4, "ΓΑΊΩ*→GAIŌ")]
        [InlineData(5, "γᾰλᾰκτινoς*→galaktinos")]
        [InlineData(6, "ΓΈΡΩΝ*→GERŌN")]
        [InlineData(7, "γεφῡρίζω*→gephyrizō")]
        [InlineData(8, "γύννις*→gynnis")]
        [InlineData(9, "γυμνασιαρχέω*→gumnasiarcheō")]
        [InlineData(10, "ΓΌΟΣ*→GOOS")]
        [InlineData(11, "γάγγλιον→ganglion")]
        [InlineData(12, "γαζί→gazi")]
        [InlineData(13, "γαῖα→gaia")]
        [InlineData(14, "γαιάνθραξ→gaianthrax")]
        [InlineData(15, "γαϊδουράγκαθο→gaidourankatho")]
        [InlineData(16, "γαλῆ→galē")]
        [InlineData(17, "γαλιάνδρα→galiandra")]
        [InlineData(18, "Γάλλος→Lallos")]
        [InlineData(19, "γαλουχῶ→galouchō")]
        [InlineData(20, "γάμπαγαργαλ΄ιστικό→gampagargalistiko")]
        [InlineData(21, "γειά→geia")]
        // 共 21 个
        public void test_issue_13_gamma(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "δᾳδίον*→dadion")]
        [InlineData(2, "ΔᾹΉΡ*→DAĒR")]
        [InlineData(3, "δᾰνειστής*→daneistēs")]
        [InlineData(4, "ΔΆΝΟΣ*→DANOS")]
        [InlineData(5, "Δᾱπεικὸς*→Dapeikos")]
        [InlineData(6, "δαφνηφορέω*→daphnēphoreō")]
        [InlineData(7, "ΔΈ*→DE")]
        [InlineData(8, "δεῖγμα*→deigma")]
        [InlineData(9, "ΔΈΚᾸ*→DEKA")]
        [InlineData(10, "δεκαταῖος*→dekataios")]
        [InlineData(11, "δεύτερος*→deuteros")]
        [InlineData(12, "δήϊος*→dēios")]
        [InlineData(13, "δάγγειος→dangeios")]
        [InlineData(14, "δαίμονας→daimonas")]
        [InlineData(15, "γαιμόνιος→gaimonios")]
        [InlineData(16, "δακρυσμένος→dakrysmenos")]
        [InlineData(17, "δαλτωνισμός→daltōnismos")]
        [InlineData(18, "δανεικός→daneikos")]
        [InlineData(19, "δανειον→daneion")]
        [InlineData(20, "δασκαλεύω→daskaleuō")]
        [InlineData(21, "δασμολόθιον→dasmolothion")]
        [InlineData(22, "δάσος→dasos")]
        [InlineData(23, "δασόφυτος→dasophytos")]
        // 共 23 个
        public void test_issue_13_delta(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ἕᾱγα*→heaga")]
        [InlineData(2, "ἔαξα*→eaja")]
        [InlineData(3, "ἘΑὨ*→EAŌ")]
        [InlineData(4, "ἐγγεγραμμένος*→engegrammenos")]
        [InlineData(5, "έγκωμιάζω*→enkōmiazō")]
        [InlineData(6, "ἔγχελυς*→enchelus")]
        [InlineData(7, "ἑδράζω*→hedrazō")]
        [InlineData(8, "ἘΘΈΛΩ*→ETHELŌ")]
        [InlineData(9, "εἱᾰμενή*→heiamenē")]
        [InlineData(10, "ἑκασταχόθι*→hekastachothi")]
        [InlineData(11, "ἐλεφαίρομαι*→elephairomai")]
        [InlineData(12, "ἐάν→ean")]
        [InlineData(13, "ἑαθτός→heathtos")]
        [InlineData(14, "ἔβγα→evga")]
        [InlineData(15, "ἑβδομή→hevdomē")]
        [InlineData(16, "ἑβραϊκός→hevraikos")]
        [InlineData(17, "ἐγγαστρίμυθος→engastrimythos")]
        [InlineData(18, "Έγγλέζος→Englezos")]
        [InlineData(19, "ἔγκλειστος→enkleistos")]
        [InlineData(20, "έγχειρεσις→encheiresis")]
        [InlineData(21, "ἕδρα→hedra")]
        [InlineData(22, "ἑδώδιμος→hedōzimos")]
        // 共 22 个
        public void test_issue_14_epsilon(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ζευγίτης*→zeugitēs")]
        [InlineData(2, "ζητήσιμος*→zētēsimos")]
        [InlineData(3, "ΖΩΜΌΣ*→ZŌMOS")]
        [InlineData(4, "ζωμεύω*→zōmeuō")]
        [InlineData(5, "ΖΩΜΌΣ*→ZŌMOS")]
        [InlineData(6, "ζορκάς*→zorkas")]
        [InlineData(7, "ζόω*→zoō")]
        [InlineData(8, "ΖῨΓΌΝ*→ZYGON")]
        [InlineData(9, "ζῷον*→zōon")]
        [InlineData(10, "ζῠγοστᾰτέω*→zugostateō")]
        [InlineData(11, "ζαβάδα→zavada")]
        [InlineData(12, "ζαβλακώνω→zavlakōnō")]
        [InlineData(13, "ζαλίζω→zalizō")]
        [InlineData(14, "ζάπλουτος→zaploutos")]
        [InlineData(15, "ζαχαριέρα→zachariera")]
        [InlineData(16, "ζαχαροπλαστεῖον→zacharoplasteion")]
        [InlineData(17, "ζεϊμπέκικος→zeimpekikos")]
        [InlineData(18, "ζεωίθ→zeōith")]
        [InlineData(19, "ζέροεϋ→zeroeu")]
        [InlineData(20, "ζήλ→zēl")]
        [InlineData(21, "ζωώδης→zōōdēs")]
        // 共 21 个
        public void test_issue_14_zeta(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ἤ*→ē")]
        [InlineData(2, "ἧ*→hē")]
        [InlineData(3, "ἦ*→ē")]
        [InlineData(4, "ἠβαιός*→ēbaios")]
        [InlineData(5, "ἡβάσκω*→hēbaskō")]
        [InlineData(6, "ἭΒΗ*→HĒBĒ")]
        [InlineData(7, "ἡβητής*→hēbētēs")]
        [InlineData(8, "ἡγεμοωεύω*→hēgemoōeuō")]
        [InlineData(9, "ἤγγειλα*→ēngeila")]
        [InlineData(10, "ἤγγῐκα*→ēngika")]
        [InlineData(11, "ἡγεμόσυνα*→hēgemosyna")]
        [InlineData(12, "ἡγέομαι*→hēgeomai")]
        [InlineData(13, "ἡγέτης*→hēgetēs")]
        [InlineData(14, "ἥ→hē")]
        [InlineData(15, "ἢ→ē")]
        [InlineData(16, "ἡγεμ→hēgem")]
        [InlineData(17, "ἡγοῆμαι→hēgoēmai")]
        [InlineData(18, "ἡδη→hēdē")]
        [InlineData(19, "ἠθικολογῶ→ēthikologō")]
        [InlineData(20, "ἦθος→ēthos")]
        [InlineData(21, "ἥκιστα→hēkista")]
        [InlineData(22, "ἠλεκτροκίνητος→ēlektrokinētos")]
        [InlineData(23, "ἠλεκτροπληξία→ēlektroplēxia")]
        [InlineData(24, "ἡλιακός→hēliakos")]
        [InlineData(25, "ἡλικία→hēlikia")]
        [InlineData(26, "ἧλος→hēlos")]
        // 共 26 个
        public void test_issue_14_eta(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "θάβω*→thabō")]
        [InlineData(2, "θαλαμηπόλος*→thalamēpolos")]
        [InlineData(3, "θαλασσόβιος*→thalassobios")]
        [InlineData(4, "θαλασσοδάωειον*→thalassodaōeion")]
        [InlineData(5, "θαλερός*→thaleros")]
        [InlineData(6, "θαμπός*→thampos")]
        [InlineData(7, "θαμών*→thamōn")]
        [InlineData(8, "θανή*→thanē")]
        [InlineData(9, "θαρρῶ*→tharrō")]
        [InlineData(10, "θαῦμα*→thauma")]
        [InlineData(11, "θάβω→thavō")]
        [InlineData(12, "θαλαμηπόλος→thalamēpolos")]
        [InlineData(13, "θαλασοδέρνω→thalasodernō")]
        [InlineData(14, "θαλασσοπνίγομαι→thalassopnigomai")]
        [InlineData(15, "θαλερός→thaleros")]
        [InlineData(16, "θανατηφόρος→thanatēphoros")]
        [InlineData(17, "θανή→thanē")]
        [InlineData(18, "θαρρῶ→tharrō")]
        [InlineData(19, "θαυματουργός→thaumatourgos")]
        [InlineData(20, "θεία→theia")]
        [InlineData(21, "θειικός→theiikos")]
        // 共 21 个
        public void test_issue_14_theta(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ἰαίνω*→iainō")]
        [InlineData(2, "ἴαμβος*→iambos")]
        [InlineData(3, "᾿Ιανουάριος*→Ianouarios")]
        [InlineData(4, "ἰατρεύω*→iatreuō")]
        [InlineData(5, "ἰατροδικαστής*→iatrodikastēs")]
        [InlineData(6, "ἰαχή*→iachē")]
        [InlineData(7, "ἰδέα*→idea")]
        [InlineData(8, "ἰδιαιτέρως*→idiaiterōs")]
        [InlineData(9, "Ιδιοποιοῦμαι*→Idiopoioumai")]
        [InlineData(10, "Ιδίωμα*→Idiōma")]
        [InlineData(11, "ἰαματικός→iamatikos")]
        [InlineData(12, "᾿λανουάριος→lanouarios")]
        [InlineData(13, "᾿λάπων→lapōn")]
        [InlineData(14, "ἰατρεῖον→iatreion")]
        [InlineData(15, "ἰατροδικαστής→iatrodikastēs")]
        [InlineData(16, "ἰαχή→iachē")]
        [InlineData(17, "ἴδε→ide")]
        [InlineData(18, "ἰδιαιτέρως→idiaiterōs")]
        [InlineData(19, "ἱέραξ→hierax")]
        [InlineData(20, "ἱεραπόστολος→hierapostolos")]
        // 共 20 个
        public void test_issue_15_iota(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "καβαλιέρος*→kabalieros")]
        [InlineData(2, "καβάλλα*→kaballa")]
        [InlineData(3, "καβαλλικεύω*→kaballikeuō")]
        [InlineData(4, "καγκελόπορτα*→kankloporta")]
        [InlineData(5, "καγχάζω*→kanchazō")]
        [InlineData(6, "καήλα*→kaēla")]
        [InlineData(7, "καημός*→kaēmos")]
        [InlineData(8, "καθαίρεσις*→kathairesis")]
        [InlineData(9, "καθαρεύουσα*→kathareuousa")]
        [InlineData(10, "καθαρίζω*→katharizō")]
        [InlineData(11, "καβαλλικεύω→kavallikeuō")]
        [InlineData(12, "κάγκελο→kankelo")]
        [InlineData(13, "καημένος→kaēmenos")]
        [InlineData(14, "καθαίπεσις→kathaipesis")]
        [InlineData(15, "καθαρίζω→katharizō")]
        [InlineData(16, "καθούμενος→kathoumenos")]
        [InlineData(17, "καίριος→kairios")]
        [InlineData(18, "κακομελετῶ→kakomeletō")]
        [InlineData(19, "κακοφτιαγμένος→kakophtiagmenos")]
        [InlineData(20, "καλίϊ→kalii")]
        // 共 20 个
        public void test_issue_15_kappa(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "λάβαρον*→labaron")]
        [InlineData(2, "λαβεῖν*→labein")]
        [InlineData(3, "λαβή*→labē")]
        [InlineData(4, "λαβομάνο*→labomano")]
        [InlineData(5, "λάβρα*→labra")]
        [InlineData(6, "λαγοκοιμοῦμαι*→lagokoimoumai")]
        [InlineData(7, "λαγωνικό*→lagōniko")]
        [InlineData(8, "λάδι*→ladi")]
        [InlineData(9, "λαδομπογιά*→ladompogia")]
        [InlineData(10, "λάθ*→lath")]
        [InlineData(11, "λαβύρινθος→lavyrinthos")]
        [InlineData(12, "λαγκεμένος→lankemenos")]
        [InlineData(13, "λαγούνες→lagounes")]
        [InlineData(14, "λακκούβα→lakkouva")]
        [InlineData(15, "λακκάκι→lakkaki")]
        [InlineData(16, "λαλούμενα→laloumena")]
        [InlineData(17, "λαλῶ→lalō")]
        [InlineData(18, "λαντζιέρης→lantzierēs")]
        [InlineData(19, "λαρυγγισμός→laryngismos")]
        [InlineData(20, "λάσπη→laspē")]
        // 共 20 个
        public void test_issue_15_lambda(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "μαβής*→mabēs")]
        [InlineData(2, "μαγγανεία*→manganeia")]
        [InlineData(3, "μαγγώνω*→mangōnō")]
        [InlineData(4, "μαγειρίτσα*→mageiritsa")]
        [InlineData(5, "μαγερειό*→magereio")]
        [InlineData(6, "μαγευτικός*→mageutikos")]
        [InlineData(7, "μαγνητόφωνον*→magnētophōnon")]
        [InlineData(8, "μαέστρος*→maestros")]
        [InlineData(9, "μαζί*→mazi")]
        [InlineData(10, "μαθέ*→mathe")]
        [InlineData(11, "μαῖα*→maia")]
        [InlineData(12, "μαίανδρος*→maiandros")]
        [InlineData(13, "μαγγανοπήγαδο→manganopēgado")]
        [InlineData(14, "μαγεία→mageia")]
        [InlineData(15, "μαγειπεῖον→mageipeion")]
        [InlineData(16, "μαγιό→magio")]
        [InlineData(17, "μαγκούφης→mankouphēs")]
        [InlineData(18, "μαθαίνω→mathainō")]
        [InlineData(19, "μαίανδρος→maiandros")]
        [InlineData(20, "μαϊμοῦ→maimou")]
        [InlineData(21, "Μάϊος→Maios")]
        [InlineData(22, "μακρ→makr")]
        [InlineData(23, "μακρινός→makrinos")]
        [InlineData(24, "μπάτης→batēs")]
        // 共 24 个
        public void test_issue_15_mu(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ναϊάς*→naias")]
        [InlineData(2, "ναργιλές*→nargiles")]
        [InlineData(3, "νάρθηξ*→narthēx")]
        [InlineData(4, "ναρκλιεθτικόν*→narkliethtikon")]
        [InlineData(5, "ναρκοθέτις*→narkothetis")]
        [InlineData(6, "ναῦληρος*→naulēros")]
        [InlineData(7, "ναθλώνω*→nathlōnō")]
        [InlineData(8, "ναθμαχία*→nathmaxia")]
        [InlineData(9, "ναυσιπλοΐα*→nausiploia")]
        [InlineData(10, "ναυτικόν*→nautikon")]
        [InlineData(11, "νάζι→nazi")]
        [InlineData(12, "νάϊλον→nailon")]
        [InlineData(13, "ναρκαλιευτικόν→narkalieutikon")]
        [InlineData(14, "ναύαρχος→nauarchos")]
        [InlineData(15, "ναυμαχία→naumachia")]
        [InlineData(16, "ναυπηγεῖον→naupēgeion")]
        [InlineData(17, "ναυτόπαις→nautopais")]
        [InlineData(18, "νεάζω→neazō")]
        [InlineData(19, "νειᾶτα→neiata")]
        [InlineData(20, "νεκροφάνεια→nekrophaneia")]
        [InlineData(21, "νενέ→nene")]
        [InlineData(22, "νεο-→neo-")]
        [InlineData(23, "νεογέννητος→neogennētos")]
        // 共 23 个
        public void test_issue_16_nu(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ξάγναντο*→xagnanto")]
        [InlineData(2, "ξαγοράρης*→xagorarēs")]
        [InlineData(3, "ξαδέρφη*→xaderphē")]
        [InlineData(4, "ξαλαφρώνω*→xalaphrōnō")]
        [InlineData(5, "ξαναγεννιέμαι*→xanagenniemai")]
        [InlineData(6, "ξανάστροφη*→xanastrophē")]
        [InlineData(7, "ξάωοιγμα*→xaōoigma")]
        [InlineData(8, "ξαποσταίνω*→xapostainō")]
        [InlineData(9, "ξαφνικό*→xaphniko")]
        [InlineData(10, "ξαφωικός*→xaphōikos")]
        [InlineData(11, "ξάγναντο→zagnanto")]
        [InlineData(12, "ξαδέρφη→zaderphē")]
        [InlineData(13, "ξαίρω→zairō")]
        [InlineData(14, "ξαφνιάζω→zaphniazō")]
        [InlineData(15, "ξεβάφω→zevaphō")]
        [InlineData(16, "ξεκαρζίζομαι→zekarzizomai")]
        [InlineData(17, "ξελαρυγγίζομαι→zelaryngizomai")]
        [InlineData(18, "ξενίζω→zenizō")]
        [InlineData(19, "ξένος→zenos")]
        [InlineData(20, "ξεραΐλα→zeraila")]
        // 共 20 个
        public void test_issue_16_xi(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ὅ*→ho")]
        [InlineData(2, "Ὁβριός*→hobrios")]
        [InlineData(3, "ὀγκόλιθος*→ogkolithos")]
        [InlineData(4, "ὀδαλίσκη*→odaliskē")]
        [InlineData(5, "ὁδογέφυρα*→hodogephyra")]
        [InlineData(6, "ὁδοιπορικά*→hodoiporika")]
        [InlineData(7, "ὀδονταλγία*→odontalgia")]
        [InlineData(8, "ὀδοντόβουτσα*→odontoboutsa")]
        [InlineData(9, "ὁδοστρωτήρ*→hodostrōtēr")]
        [InlineData(10, "όδοντογλυφίδα*→odontoglyphida")]
        [InlineData(11, "ὀβελίσκος→oveliskos")]
        [InlineData(12, "Ὁβριός→hovrios")]
        [InlineData(13, "ὄγδοος→ogdoos")]
        [InlineData(14, "ὅδε→hode")]
        [InlineData(15, "ὁδηγία→hodēgia")]
        [InlineData(16, "ὁδοκαθαριστής→hodokatharidtēs")]
        [InlineData(17, "ὁδός→hodos")]
        [InlineData(18, "ὀδυρμός→odyrmos")]
        [InlineData(19, "ὄδύσσεια→odysseia")]
        [InlineData(20, "ὄδω→odō")]
        // 共 20 个
        public void test_issue_16_omicron(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "παγάνα*→pagana")]
        [InlineData(2, "παγερός*→pageros")]
        [InlineData(3, "παγετών*→pagetōn")]
        [InlineData(4, "παγκόσμιος*→pankosmios")]
        [InlineData(5, "παγωνιέρα*→pagōniera")]
        [InlineData(6, "παιγνιόχαρτον*→paigniocharton")]
        [InlineData(7, "παίνεμα*→painema")]
        [InlineData(8, "παίξιμο*→paiximo")]
        [InlineData(9, "παλαιοπώλης*→palaiopōlēs")]
        [InlineData(10, "παλαμάκια*→palamakia")]
        [InlineData(11, "παγερός→pageros")]
        [InlineData(12, "παγίδι→pagidi")]
        [InlineData(13, "πάγκος→pankos")]
        [InlineData(14, "παγοπέδιλον→pagopedilon")]
        [InlineData(15, "παγωνιέρα→pagōniera")]
        [InlineData(16, "παθιασμένος→pathiasmenos")]
        [InlineData(17, "παιγνιόχαρτον→paigniocharton")]
        [InlineData(18, "παιδομάζωμα→paidomazōma")]
        [InlineData(19, "παλεύω→paleuō")]
        [InlineData(20, "πάλι→pali")]
        // 共 20 个
        public void test_issue_16_pi(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ῥά*→rha")]
        [InlineData(2, "ῥαββίον*→rhabbion")]
        [InlineData(3, "ῥαβδονομέω*→rhabdonomeō")]
        [InlineData(4, "ῥαβδονχέω*→rhabdoncheō")]
        [InlineData(5, "ῥαγδαῖος*→rhagdaios")]
        [InlineData(6, "ῬᾸΔΝΌΣ*→RHADINOS")]
        [InlineData(7, "ῥᾴδιος*→rhadios")]
        [InlineData(8, "ῥᾳδιούργέω*→rhadiourgeō")]
        [InlineData(9, "ῥᾳθῡμία*→rhathymia")]
        [InlineData(10, "ῬΑΊΝΩ*→RHAINŌ")]
        [InlineData(11, "ῥᾰκιο-συρραπτάδης*→rhkio-syrraptadēs")]
        [InlineData(12, "ῥαπτός*→rhaptos")]
        [InlineData(13, "ραβαΐσι→ravaisi")]
        [InlineData(14, "ράγια→ragia")]
        [InlineData(15, "ραδιογραφία→radiographia")]
        [InlineData(16, "ραιβοσκελές→raivoskeles")]
        [InlineData(17, "ραπτομηχανή→raptomēchanē")]
        [InlineData(18, "ραχοκόκκαλο→rachokokkalo")]
        [InlineData(19, "πέκλάμα→peklama")]
        [InlineData(20, "πετσινόλαδο→petsinolado")]
        [InlineData(21, "ρεύω→reuō")]
        [InlineData(22, "ρῆζις→rēzis")]
        // 共 22 个
        public void test_issue_17_rho(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "Σᾰβάζιος*→Sabazios")]
        [InlineData(2, "Σαββᾰτίζω*→Sabbatizō")]
        [InlineData(3, "σαγή*→sagē")]
        [InlineData(4, "Σαδδουκαῖοι*→Saddoukaioi")]
        [InlineData(5, "ΣΆΓΟΣ*→SAGOS")]
        [InlineData(6, "ΣΑΊΡΩ*→SAIRŌ")]
        [InlineData(7, "Σᾰλᾰμῑν-ᾰφέτης*→Salamin-aphetēs")]
        [InlineData(8, "σάλασσα*→salassa")]
        [InlineData(9, "Σάρδεις*→Sardeis")]
        [InlineData(10, "σάρκῐκός*→sarkikos")]
        [InlineData(11, "σάβανον→savanon")]
        [InlineData(12, "σαγή→sagē")]
        [InlineData(13, "σακαράκα→sakaraka")]
        [InlineData(14, "σακκάκι→sakkaki")]
        [InlineData(15, "σαλαμάνδρα→salamandra")]
        [InlineData(16, "σάλιαγκας→saliankas")]
        [InlineData(17, "σαλιάρης→saliarēs")]
        [InlineData(18, "σαλιώνω→saliōnō")]
        [InlineData(19, "σαλτιμπάγκος→saltimpankos")]
        [InlineData(20, "σαμπάνια→sampania")]
        // 共 20 个
        public void test_issue_17_sigma(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }

        [Theory]
        [InlineData(1, "ταβλιόπη*→tabliopē")]
        [InlineData(2, "τἀγαμέμνονος*→tagamemnons")]
        [InlineData(3, "τᾰγεύω*→tageuō")]
        [InlineData(4, "τἀγχέλεια*→tagcheleia")]
        [InlineData(5, "Ταίνᾰρος*→Tainaros")]
        [InlineData(6, "τακτικός*→taktikos")]
        [InlineData(7, "τᾰλαιπωρέω*→talaipōreō")]
        [InlineData(8, "τᾰλαιπωρία*→talaipōria")]
        [InlineData(9, "τάλατον*→talaton")]
        [InlineData(10, "ΤΆΛᾸΡΟΣ*→TALAROS")]
        [InlineData(11, "ταβέρνα→taverna")]
        [InlineData(12, "ταγή→tagē")]
        [InlineData(13, "ταγματάρχης→tagmatarchēs")]
        [InlineData(14, "τακτοποι→taktopoi")]
        [InlineData(15, "ταλαίπωρος→talaipōros")]
        [InlineData(16, "ταμιευτήριον→tamieutērion")]
        [InlineData(17, "ταμποθρᾶς→tampothras")]
        [InlineData(18, "ταζιδεύω→tazideuō")]
        [InlineData(19, "ταπετσαρία→tapetsaria")]
        [InlineData(20, "τασάκι→tasaki")]
        // 共 20 个
        public void test_issue_17_tau(int number, string source, string? target = null, bool acient = false)
        {
            test_word(number, source, target, acient);
        }


        // 测试基本字母规则
        [Theory]
        // 规则里面带的测试案例
        [InlineData("Α→A")]
        [InlineData("Ἁ→HA")]
        [InlineData("Ἃ→HA")]
        [InlineData("Ἇ→HA")]
        [InlineData("ᾉ→HA")]
        [InlineData("ᾋ→HA")]
        [InlineData("ᾍ→HA")] // 1f8d
        [InlineData("ᾏ→HA")]
        [InlineData("Ἀ→A")]
        [InlineData("Ἂ→A")]
        [InlineData("ᾈ→A")]
        [InlineData("ᾌ→A")]

        // ΑἹ→HAI、ΑἽ→HAI、ΑἻ→HAI、ΑἿ→HAI、ΑὙ→HAU、ΑὝ→HAU、ΑὛ→HAU、ΑὟ→HAU
        [InlineData("ΑἹ", "HAI")]
        [InlineData("ΑἽ", "HAI")]
        [InlineData("ΑἻ", "HAI")]
        [InlineData("ΑἿ", "HAI")]
        [InlineData("ΑὙ", "HAU")]
        [InlineData("ΑὝ", "HAU")]
        [InlineData("ΑὛ", "HAU")]
        [InlineData("ΑὟ", "HAU")]

        /*
        α→a、
        ἁ→ha、
        ἃ →ha、
        ἅ→ha、
        ἇ→ha、
        ᾁ→ha、
        ᾃ→ha、
        ᾅ→ha、
        ᾇ→ha、
        ἀ→a、
        ἆ→a、
        ᾄ→a、
        αἱ→hai、
        αἵ→hai、
        αἳ→hai、
        αἷ→hai、
        αὑ→hau、
        αὕ→hau、
        αὓ→hau、
        αὗ→hau。
         * */
        [InlineData("α", "a")]
        [InlineData("ἁ", "ha")]
        [InlineData("ἃ", "ha")]
        [InlineData("ἅ", "ha")]
        [InlineData("ἇ", "ha")]
        [InlineData("ᾁ", "ha")]
        [InlineData("ᾃ", "ha")]
        [InlineData("ᾅ", "ha")]
        [InlineData("ᾇ", "ha")]
        [InlineData("ἀ", "a")]
        [InlineData("ἆ", "a")]
        [InlineData("ᾄ", "a")]
        [InlineData("αἱ", "hai")]
        [InlineData("αἵ", "hai")]
        [InlineData("αἳ", "hai")]
        [InlineData("αἷ", "hai")]
        [InlineData("αὑ", "hau")]
        [InlineData("αὕ", "hau")]
        [InlineData("αὓ", "hau")]
        [InlineData("αὗ", "hau")]
        public void test_alpha(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Β", "B", true)]
        [InlineData("Β", "V", false)]
        [InlineData("β", "b", true)]
        [InlineData("β", "v", false)]
        public void test_beta(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Γ", "G")]
        [InlineData("ΓΓ", "NG")]
        [InlineData("γ", "g")]
        [InlineData("γγ", "ng")]
        [InlineData("Γκ", "Gk")]
        [InlineData("Γκαρσόν", "Gkarson")]
        [InlineData("Γκαζόζα", "Gkazoza")]
        [InlineData("Γκάζι", "Gkazi")]
        [InlineData("ΓΚ", "GK")]
        [InlineData("ΓΚΑΡΣΌΝ", "GKARSON")]

        [InlineData("ΓΚΑΖΌΖΑ", "GKAZOZA")]
        [InlineData("ΓΚΆΖΙ", "GKAZI")]
        [InlineData("ΑΓΚ", "AGK")]
        [InlineData("ΡΓΚ", "RGK")]
        [InlineData("ΣΟΡΌΓΚ", "SOROGK")]
        [InlineData("ΣΥΓΚΕΝΤΡΏΣΕΩΝ", "SYNKENTRŌSEŌN")]  // 词中 反例
        [InlineData("ΠΆΓΚΑΛΟΝ", "PANKALON")]    // 反例
        [InlineData("ΖΙΟΥΓΚΆΝΟΦ", "ZIOUNKANOPH")]   // 反例
        // [InlineData("ΖΙΟΥΓΚΆΝΟΦ", "ZIOUNKANOPH")]   // 反例
        [InlineData("γκ", "gk")]
        [InlineData("γκαρσόν", "gkarson")]
        [InlineData("γκαζόζα", "gkazoza")]

        [InlineData("γκάζι", "gkazi")]

        [InlineData("αγκ", "agk")]
        [InlineData("ργκ", "rgk")]
        [InlineData("ρόγκ", "rogk")]
        [InlineData("Συγκεντρώσεων", "Synkentrōseōn")]  // 词中 反例
        [InlineData("πάγκαλον", "pankalon")]
        [InlineData("Ζιουγκάνοφ", "Ziounkanoph")]
        [InlineData("γξ", "nx")]
        [InlineData("λυγξ", "lynx")]
        [InlineData("ἄγξις", "anxis")]
        [InlineData("γξθ", "nxth")]
        [InlineData("ΓΞ", "NX")]
        [InlineData("γχ", "nch")]
        [InlineData("γχκ", "nchk")]
        [InlineData("γχν", "nchn")]
        [InlineData("γχς", "nchs")]

        [InlineData("Ελέγχου", "Helenchou")] // Elenchou 疑似错误 
        [InlineData("ΓΧ", "NCH")]
        // [InlineData("")]
        public void test_gamma(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ε", "E")]
        [InlineData("Ἓ", "HE")]
        [InlineData("Ἕ", "HE")]
        [InlineData("Ἑ", "HE")]
        [InlineData("Ὲ", "E")]
        //[InlineData("Ἓ", "HE")]   // 重复了
        [InlineData("Έ", "E")]
        [InlineData("ΕἹ", "HEI")]
        [InlineData("ΕἽ", "HEI")]
        [InlineData("ΕἻ", "HEI")]
        [InlineData("ΕἿ", "HEI")]
        [InlineData("ΕὙ", "HEU")]
        [InlineData("ΕὝ", "HEU")]
        [InlineData("ΕὛ", "HEU")]
        [InlineData("ΕὟ", "HEU")]
        [InlineData("ε", "e")]
        [InlineData("ἑ", "he")]
        [InlineData("ἕ", "he")]
        [InlineData("ἓ", "he")]
        [InlineData("ἔ", "e")]
        [InlineData("ἐ", "e")]
        [InlineData("εἱ", "hei")]
        [InlineData("εἵ", "hei")]
        [InlineData("εἳ", "hei")]
        [InlineData("εἷ", "hei")]
        [InlineData("εὑ", "heu")]
        [InlineData("εὕ", "heu")]
        [InlineData("εὓ", "heu")]
        [InlineData("εὗ", "heu")]
        public void test_epsilon(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ζ", "Z")]
        [InlineData("ζ", "z")]
        [InlineData("ζευγίτης", "zeugitēs")]
        [InlineData("ζητήσιμος", "zētēsimos")]
        // ΖΟ΄ΦΟΣ*→ZOPHOS
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_zeta(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Θ", "TH")]
        [InlineData("θ", "th")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_theta(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ι", "I")]
        [InlineData("Ἱ", "HI")]
        [InlineData("Ἵ", "HI")]
        [InlineData("Ἳ", "HI")]
        [InlineData("Ἷ", "HI")]
        [InlineData("ΑἹ", "HAI")]
        [InlineData("ΕἹ", "HEI")]
        [InlineData("ΥἹ", "HUI")]
        [InlineData("ΟἹ", "HOI")]
        [InlineData("Ἲ", "I")]
        [InlineData("Ἰ", "I")]
        [InlineData("ι", "i")]
        [InlineData("ἱ", "hi")]
        [InlineData("ἵ", "hi")]
        [InlineData("ἳ", "hi")]
        [InlineData("ἷ", "hi")]
        [InlineData("αἱ", "hai")]
        [InlineData("εἱ", "hei")]
        [InlineData("υἱ", "hui")]
        [InlineData("οἱ", "hoi")]
        [InlineData("ἲ", "i")]
        [InlineData("ῗ", "i")]
        // [InlineData("")]
        public void test_iota(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Κ", "K")]
        [InlineData("κ", "k")]
        // [InlineData("")]
        public void test_kappa(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Λ", "L")]
        [InlineData("λ", "l")]
        // [InlineData("")]
        public void test_lambda(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Μ", "M")]
        [InlineData("μ", "m")]
        [InlineData("μπ", "b")]  //（词首）
        [InlineData("μπασκετ", "basket")]
        [InlineData("μπαμ", "bam")]
        [InlineData("μπιφτέκια", "biphtekia")]
        [InlineData("πέμπω", "pempō")]
        [InlineData("μπαρμπι", "barmpi")]
        [InlineData("αμπελι", "ampeli")]
        [InlineData("συμπ", "symp")]
        [InlineData("υμπ", "ymp")]
        [InlineData("βμπ", "bmp", true)]  //
        [InlineData("ψμπ", "psmp")]
        [InlineData("ρμπνμπ", "rmpnmp")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]

        public void test_mu(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("ν→n")]
        // [InlineData("ντ→ḏ")]
        [InlineData("Ντ→Ḏ")]
        [InlineData("Ντοτ→Ḏot")]
        [InlineData("Ντιανα→Ḏiana")]
        [InlineData("Ντοκουμεντο→Ḏokoumento")]
        [InlineData("ΝΤ→Ḏ")]
        [InlineData("ΝΤΟΤ→ḎOT")]
        [InlineData("ΝΤΑΝΑ→ḎANA")]
        [InlineData("ΝΤΟΚΟΥΜΕΝΤΟ→ḎOKOUMENTO")]
        [InlineData("αντέννα→antenna")]
        [InlineData("μεντα→menta")]
        [InlineData("πενταποσταγμα→pentapostagma")]
        [InlineData("ΛΙΝΤΛ→LINTL")]
        [InlineData("ΖΝΤΟΒΤΣ*→ZNTOBTS")]
        [InlineData("ΖΝΤΑΝΟΨ→ZNTANOPS")]
        [InlineData("ΝΤΟΝΤ→ḎONT")]
        [InlineData("ΤΝΤ→TNT")]  // 原来右侧是 ḎT，疑似错误了
        [InlineData("ΜΝΤ→MNT")]
        [InlineData("ντ→ḏ")]
        [InlineData("ντινα→ḏina")]
        [InlineData("νταλκας→ḏalkas")]
        [InlineData("ντσιαφέρης→ḏsiapherēs")]
        [InlineData("λιντλ→lintl")]
        [InlineData("ζντοβτς*→zntobts")]
        [InlineData("ζντανοφ→zntanoph")]
        [InlineData("ντοντ→ḏont")]
        [InlineData("τντ→tnt")]
        [InlineData("μντ→mnt")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]

        public void test_nu(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }


        [Theory]
        [InlineData("Ξ→X")]
        [InlineData("ξ→x")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]

        public void test_xi(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ο→O")]
        [InlineData("Ὁ→HO")]
        [InlineData("Ὅ→HO")]
        [InlineData("Ὃ→HO")]
        [InlineData("ΟἹ→HOI")]
        [InlineData("ΟἽ→HOI")]
        [InlineData("ΟἻ→HOI")]
        [InlineData("ΟἿ→HOI")]
        [InlineData("ΟὙ→HOU")]
        [InlineData("ΟὝ→HOU")]
        [InlineData("ΟὛ→HOU")]
        [InlineData("ΟὟ→HOU")]
        [InlineData("ο→o")]
        [InlineData("ὁ→ho")]
        [InlineData("ὅ→ho")]
        [InlineData("ὃ→ho")]
        [InlineData("οἱ→hoi")]
        [InlineData("οἵ→hoi")]
        [InlineData("οἳ→hoi")]
        [InlineData("οἷ→hoi")]
        [InlineData("οὑ→hou")]
        [InlineData("οὕ→hou")]
        [InlineData("οὓ→hou")]
        [InlineData("οὗ→hou")]
        [InlineData("ου→ou")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]

        public void test_omicron(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Π→P")]
        [InlineData("π→p")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_pi(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ρ→R")]
        [InlineData("Ῥ→RH")]
        [InlineData("ρ→r")]
        [InlineData("ῥ→rh")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_rho(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Σ→S")]
        [InlineData("Ϲ→S")]
        [InlineData("σ→s")]
        [InlineData("ϲ→s")]
        [InlineData("ΣΕΙΣΜΟΣ→SEISMOS")]
        [InlineData("ΣΑΡΩΣΗ→SARŌSĒ")]
        [InlineData("ΣΟΛΟΝ→SOLON")]
        [InlineData("Σουβλάκι*→Soublaki")]
        [InlineData("σουβλάκι*→soublaki")]   // 加了星号
        [InlineData("σμαρτμεδισυ→smartmedisy")]
        [InlineData("σχολεια→scholeia")]
        [InlineData("μος→mos")]
        [InlineData("ψος→psos")]    // phos 疑似错误
        [InlineData("εος→eos")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_sigma(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Τ→T")]
        [InlineData("τ→t")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_tao(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Υ→Y")]
        [InlineData("ΑΥ→AU")]
        [InlineData("ΕΥ→EU")]
        [InlineData("ΗΥ→ĒU")]
        [InlineData("ΟΥ→OU")]
        [InlineData("ΥΙ→UI")]
        [InlineData("Ὑ→HY")]
        [InlineData("Ὕ→HY")]
        [InlineData("Ὓ→HY")]
        [InlineData("Ὗ→HY")]
        [InlineData("ὙΙ→HUI")]
        [InlineData("ὝΙ→HUI")]
        [InlineData("ὛΙ→HUI")]
        [InlineData("ὟΙ→HUI")]
        [InlineData("αυ→au")]
        [InlineData("ευ→eu")]
        [InlineData("ηυ→ēu")]
        [InlineData("ου→ou")]
        [InlineData("υι→ui")]
        [InlineData("ὑ→hy")]
        [InlineData("ὕ→hy")]
        [InlineData("ὓ→hy")]
        [InlineData("ὗ→hy")]
        [InlineData("ὑι→hui")]
        [InlineData("ὕι→hui")]
        [InlineData("ὓι→hui")]
        [InlineData("ὗι→hui")]
        [InlineData("Ῥ→RH")]
        [InlineData("ῬΎΓΧΟΣ→RHYNCHOS")] // RHYGCHOS 疑似错误
        [InlineData("ῬΟΜΨΑΊΑ→RHOMPSAIA")]   // RHOMPHAIA 疑似错误
        [InlineData("ῬΗΤΟΡΙΚΗ*→RHĒTORIKĒ")]  // RHTORIKĒ 疑似错误
        [InlineData("ῥ→rh")]
        [InlineData("ῥῆμα→rhēma")]
        [InlineData("ῥάβδος*→rhabdos")]
        [InlineData("ῥητορική→rhētorikē")]
        [InlineData("ΕΥΧΑΡΙΣΤΏ→EUCHARISTŌ")]    // EYCHARISTŌ 疑似错误
        [InlineData("ΠΕΥΚΟΧΩΡΙ→PEUKOCHŌRI")]    // PEUKOCHŌPI 疑似错误
        [InlineData("ΗΥΘΝΔΑΙ→ĒUTHNDAI")]    // 
        [InlineData("ΜΟΥΣΙΚΟΣ→MOUSIKOS")]
        [InlineData("ΥΙΟΥΤΙΟΥΜΠ→UIOUTIOUMP")]
        [InlineData("ΖΩΥΦΙΑ→ZŌUPHIA")]  // TODO: 需要增补 ΩΥ 双元音转写规则
        [InlineData("μαυρικιος→maurikios")]
        [InlineData("πευκοχωρι→peukochōri")]
        [InlineData("τηυρογεν→tēurogen")]
        [InlineData("μουσικος→mousikos")]
        [InlineData("ουιπεστ→ouipest")]
        [InlineData("ζωυφια→zōuphia")]
        [InlineData("υεκα→yeka")]
        [InlineData("υοθτυβε*→yothtybe")]   // 加了 *
        [InlineData("υμαιλ→ymail")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_upsilon(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Φ→PH")]
        [InlineData("φ→ph")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_phi(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Χ→CH")]
        [InlineData("χ→ch")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_chi(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ψ→PS")]
        [InlineData("ψ→ps")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_psi(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ω→Ō")]
        [InlineData("Ὡ→HŌ")]
        [InlineData("Ὥ→HŌ")]
        [InlineData("Ὣ→HŌ")]
        [InlineData("ᾯ→HŌ")]
        [InlineData("Ὧ→HŌ")]
        [InlineData("ᾩ→HŌ")]
        [InlineData("ᾭ→HŌ")]
        [InlineData("ᾫ→HŌ")]
        [InlineData("ω→ō")]
        [InlineData("ὡ→hō")]
        [InlineData("ὥ→hō")]
        [InlineData("ὣ→hō")]
        [InlineData("ᾧ→hō")]
        [InlineData("ὧ→hō")]
        [InlineData("ᾡ→hō")]
        [InlineData("ᾥ→hō")]
        [InlineData("ᾣ→hō")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_omega(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ϝ→W")]
        [InlineData("ϝ→w")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_digamma(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ϙ→Ḳ")]
        [InlineData("ϙ→ḳ")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        // [InlineData("")]
        public void test_qoppa(string source, string? target = null, bool acient = false)
        {
            test_word(source, target, acient);
        }

        [Theory]
        [InlineData("Ηλιακοπουλος", "Ēliakopoulos")]

        public void test_string(string source, string target)
        {
            Assert.True(GreekTransliter.IsAllGreekChar(source));

            var result = GreekTransliter.TransliterWord(source, false);
            Compare(target, result);
            Assert.Equal(target, result);
        }

        void test_word(string source,
            string? target = null,
            bool ancient = false)
        {
            test_word(-1, source, target, ancient);
        }

        // parameters:
        //      source  可以为单纯的希腊文字符串。如果最后一个字符为 '*'，表示这是古代风格
        //              还可以为 xxxx→yyyy 形态，表示 → 以后其实是 target 内容
        //              还可以为 xxxx*→yyyy 形态，星号表示 xxxx 部分是古代风格
        void test_word(
            int number,
            string source,
            string? target = null,
            bool ancient = false)
        {
            if (target == null)
            {
                GreekTransliter.ParseTwoPart(source,
                    "→",
                    out source,
                    out target);
            }

            if (source.EndsWith("*"))
            {
                source = source.Substring(0, source.Length - 1);
                ancient = true;
            }

            /*
            if (source.Contains(':') == true)
            {
                GreekTransliter.ParseTwoPart(source,
    ":",
    out string number,
    out source);
            }
            */

            /*
            var ret = GreekTransliter.IsAllGreekChar(source, out string error);
            if (ret == false)
                throw new Exception($"{source} 中包含了非希腊字母: {error}");
            */

            StringBuilder debugInfo = new StringBuilder();
            var result = GreekTransliter.TransliterString(source, ancient, debugInfo);
            output.WriteLine($"{source} --> {target} ({(target == result ? "OK" : "expect:" + result)})");
            output.WriteLine(debugInfo.ToString());
            Compare(target, result);
            Assert.Equal(target, result);
        }

        static void Compare(string s1, string s2)
        {
            if (s1.Length != s2.Length)
                throw new Exception($"字符串 \r\n'{s1}' 和 \r\n'{s2}' 长度不同。({s1.Length} 和 {s2.Length}) \r\n'{GetCode(s1)}' \r\n'{GetCode(s2)}'");
            for (int i = 0; i < s1.Length; i++)
            {
                char c1 = s1[i];
                char c2 = s2[i];
                if (c1 != c2)
                    throw new Exception($"偏移 {i} 处的字符 '{c1}' 和 '{c2}' 不同(内码为 {GetHex(c1)} 和 {GetHex(c2)})");
            }
        }


        static string GetHex(char ch)
        {
            return "0x" + Convert.ToString((int)ch, 16);
        }

        static string GetCode(string s)
        {
            StringBuilder text = new StringBuilder();
            foreach (char c in s)
            {
                text.Append(c.ToString() + "(" + GetHex(c) + ")");
            }
            return text.ToString();
        }

    }
}